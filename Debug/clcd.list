
clcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e4  080057e4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ec  080057ec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080057f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000068  0800585c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0800585c  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7f0  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022b6  00000000  00000000  0002d8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  0002fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000963  00000000  00000000  000307a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181c8  00000000  00000000  00031103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe11  00000000  00000000  000492cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095dbf  00000000  00000000  000590dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000397c  00000000  00000000  000eee9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f2818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005734 	.word	0x08005734

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005734 	.word	0x08005734

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <I2C_CLCD_Delay_us>:
#include "I2C_CLCD.h"

extern I2C_HandleTypeDef hi2c1;

void I2C_CLCD_Delay_us(uint8_t us)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
   volatile uint8_t i;

   for(i = 0; i < 19*us/10; i++);
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e004      	b.n	8000596 <I2C_CLCD_Delay_us+0x1a>
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	3301      	adds	r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	79fa      	ldrb	r2, [r7, #7]
 800059e:	4613      	mov	r3, r2
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	4413      	add	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4413      	add	r3, r2
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <I2C_CLCD_Delay_us+0x4c>)
 80005aa:	fb82 0203 	smull	r0, r2, r2, r3
 80005ae:	1092      	asrs	r2, r2, #2
 80005b0:	17db      	asrs	r3, r3, #31
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	4299      	cmp	r1, r3
 80005b6:	dbe9      	blt.n	800058c <I2C_CLCD_Delay_us+0x10>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	66666667 	.word	0x66666667

080005cc <I2C_CLCD_SendByte>:

void I2C_CLCD_SendByte(uint8_t RS_State, uint8_t Byte)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
   uint8_t i;
   uint8_t buffer[4];

   //		데이터 상위 바이트 전송
   for(i = 0; i < 2; i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	e01c      	b.n	800061c <I2C_CLCD_SendByte+0x50>
   {
      buffer[i] = (Byte & 0xf0) |
 80005e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005e6:	f023 030f 	bic.w	r3, r3, #15
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	b25b      	sxtb	r3, r3
      		(1 << I2C_CLCD_LED) |
					(!i << I2C_CLCD_E) |
 80005f2:	7bfa      	ldrb	r2, [r7, #15]
 80005f4:	2a00      	cmp	r2, #0
 80005f6:	d101      	bne.n	80005fc <I2C_CLCD_SendByte+0x30>
 80005f8:	2204      	movs	r2, #4
 80005fa:	e000      	b.n	80005fe <I2C_CLCD_SendByte+0x32>
 80005fc:	2200      	movs	r2, #0
 80005fe:	4313      	orrs	r3, r2
 8000600:	b25a      	sxtb	r2, r3
					(0 << I2C_CLCD_RW) |
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	4313      	orrs	r3, r2
 8000608:	b25a      	sxtb	r2, r3
      buffer[i] = (Byte & 0xf0) |
 800060a:	7bfb      	ldrb	r3, [r7, #15]
					(0 << I2C_CLCD_RW) |
 800060c:	b2d2      	uxtb	r2, r2
      buffer[i] = (Byte & 0xf0) |
 800060e:	3310      	adds	r3, #16
 8000610:	443b      	add	r3, r7
 8000612:	f803 2c08 	strb.w	r2, [r3, #-8]
   for(i = 0; i < 2; i++)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	3301      	adds	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d9df      	bls.n	80005e2 <I2C_CLCD_SendByte+0x16>
					(RS_State << I2C_CLCD_RS);
   }

   //		데이터 하위 바이트 전송
   for(i = 0; i < 2; i++)
 8000622:	2300      	movs	r3, #0
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	e01b      	b.n	8000660 <I2C_CLCD_SendByte+0x94>
   {
      buffer[i+2] = (Byte << 4) | 				//	P4~P7
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	b25b      	sxtb	r3, r3
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	b25b      	sxtb	r3, r3
      		(1 << I2C_CLCD_LED) | 				//	P3
					(!i << I2C_CLCD_E) | 						// 	P2	Enale 신호를 1, 0의 순서로 전송
 8000634:	7bfa      	ldrb	r2, [r7, #15]
 8000636:	2a00      	cmp	r2, #0
 8000638:	d101      	bne.n	800063e <I2C_CLCD_SendByte+0x72>
 800063a:	2204      	movs	r2, #4
 800063c:	e000      	b.n	8000640 <I2C_CLCD_SendByte+0x74>
 800063e:	2200      	movs	r2, #0
 8000640:	4313      	orrs	r3, r2
 8000642:	b25a      	sxtb	r2, r3
					(0 << I2C_CLCD_RW) | 				//	P1	(R	=	Busy check)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	4313      	orrs	r3, r2
 800064a:	b25a      	sxtb	r2, r3
      buffer[i+2] = (Byte << 4) | 				//	P4~P7
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	3302      	adds	r3, #2
					(0 << I2C_CLCD_RW) | 				//	P1	(R	=	Busy check)
 8000650:	b2d2      	uxtb	r2, r2
      buffer[i+2] = (Byte << 4) | 				//	P4~P7
 8000652:	3310      	adds	r3, #16
 8000654:	443b      	add	r3, r7
 8000656:	f803 2c08 	strb.w	r2, [r3, #-8]
   for(i = 0; i < 2; i++)
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	3301      	adds	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d9e0      	bls.n	8000628 <I2C_CLCD_SendByte+0x5c>
					(RS_State << I2C_CLCD_RS);	//	P0
   }
   HAL_I2C_Master_Transmit(&hi2c1, PCF8574_AD | WRITE, buffer, 4, 300);
 8000666:	f107 0208 	add.w	r2, r7, #8
 800066a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2304      	movs	r3, #4
 8000672:	214e      	movs	r1, #78	; 0x4e
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <I2C_CLCD_SendByte+0xbc>)
 8000676:	f001 ff95 	bl	80025a4 <HAL_I2C_Master_Transmit>

   I2C_CLCD_Delay_us(40);
 800067a:	2028      	movs	r0, #40	; 0x28
 800067c:	f7ff ff7e 	bl	800057c <I2C_CLCD_Delay_us>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000012c 	.word	0x2000012c

0800068c <I2C_CLCD_init>:

void I2C_CLCD_init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
   uint8_t i;
   uint8_t CLCD_Init_CMD[4] = {0x28, 0x0c, 0x01, 0x06};
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <I2C_CLCD_init+0x58>)
 8000694:	603b      	str	r3, [r7, #0]

   HAL_Delay(100);
 8000696:	2064      	movs	r0, #100	; 0x64
 8000698:	f000 fd98 	bl	80011cc <HAL_Delay>

   I2C_CLCD_SendByte(0, 0x02);
 800069c:	2102      	movs	r1, #2
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff94 	bl	80005cc <I2C_CLCD_SendByte>

   HAL_Delay(2);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 fd91 	bl	80011cc <HAL_Delay>

   for(i = 0; i < 4; i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	e011      	b.n	80006d4 <I2C_CLCD_init+0x48>
   {
      I2C_CLCD_SendByte(0, CLCD_Init_CMD[i]);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	3308      	adds	r3, #8
 80006b4:	443b      	add	r3, r7
 80006b6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff ff85 	bl	80005cc <I2C_CLCD_SendByte>

      if(i == 2) HAL_Delay(2);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d102      	bne.n	80006ce <I2C_CLCD_init+0x42>
 80006c8:	2002      	movs	r0, #2
 80006ca:	f000 fd7f 	bl	80011cc <HAL_Delay>
   for(i = 0; i < 4; i++)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	3301      	adds	r3, #1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d9ea      	bls.n	80006b0 <I2C_CLCD_init+0x24>
   }
}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	06010c28 	.word	0x06010c28

080006e8 <I2C_CLCD_GotoXY>:

void I2C_CLCD_GotoXY(uint8_t X, uint8_t Y)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
   I2C_CLCD_SendByte(0, 0x80 | (0x40 * Y + X));
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	019b      	lsls	r3, r3, #6
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4413      	add	r3, r2
 8000702:	b2db      	uxtb	r3, r3
 8000704:	b25b      	sxtb	r3, r3
 8000706:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800070a:	b25b      	sxtb	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff ff5b 	bl	80005cc <I2C_CLCD_SendByte>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <I2C_CLCD_PutC>:

void I2C_CLCD_PutC(uint8_t C)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]
   if(C == '\f')
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b0c      	cmp	r3, #12
 800072c:	d107      	bne.n	800073e <I2C_CLCD_PutC+0x20>
   {
      I2C_CLCD_SendByte(0, 0x01);
 800072e:	2101      	movs	r1, #1
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff4b 	bl	80005cc <I2C_CLCD_SendByte>
      HAL_Delay(2);
 8000736:	2002      	movs	r0, #2
 8000738:	f000 fd48 	bl	80011cc <HAL_Delay>
   }
   else
   {
      I2C_CLCD_SendByte(1, C);
   }
}
 800073c:	e00c      	b.n	8000758 <I2C_CLCD_PutC+0x3a>
   else if(C == '\n')
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b0a      	cmp	r3, #10
 8000742:	d104      	bne.n	800074e <I2C_CLCD_PutC+0x30>
      I2C_CLCD_GotoXY(0, 1);
 8000744:	2101      	movs	r1, #1
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff ffce 	bl	80006e8 <I2C_CLCD_GotoXY>
}
 800074c:	e004      	b.n	8000758 <I2C_CLCD_PutC+0x3a>
      I2C_CLCD_SendByte(1, C);
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4619      	mov	r1, r3
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff ff3a 	bl	80005cc <I2C_CLCD_SendByte>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <I2C_CLCD_PutStr>:

void I2C_CLCD_PutStr(uint8_t *Str)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
   while(*Str) I2C_CLCD_PutC(*Str++);
 8000768:	e006      	b.n	8000778 <I2C_CLCD_PutStr+0x18>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ffd3 	bl	800071e <I2C_CLCD_PutC>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f4      	bne.n	800076a <I2C_CLCD_PutStr+0xa>
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <I2C_CLCD_CustomFont>:

void I2C_CLCD_ShiftStop(){
   I2C_CLCD_SendByte(0, 0b00010000);
}

void I2C_CLCD_CustomFont() {
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
   I2C_CLCD_SendByte(0, 0x40);
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ff1a 	bl	80005cc <I2C_CLCD_SendByte>
   for (int i = 0; i < 8; i++)
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	e006      	b.n	80007ac <I2C_CLCD_CustomFont+0x22>
      I2C_CLCD_SendByte(1, 0b00000);
 800079e:	2100      	movs	r1, #0
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff ff13 	bl	80005cc <I2C_CLCD_SendByte>
   for (int i = 0; i < 8; i++)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3301      	adds	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	2b07      	cmp	r3, #7
 80007b0:	ddf5      	ble.n	800079e <I2C_CLCD_CustomFont+0x14>
   for (int i = 0; i < 8; i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e006      	b.n	80007c6 <I2C_CLCD_CustomFont+0x3c>
      I2C_CLCD_SendByte(1, 0b10000);
 80007b8:	2110      	movs	r1, #16
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff ff06 	bl	80005cc <I2C_CLCD_SendByte>
   for (int i = 0; i < 8; i++)
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	3301      	adds	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	2b07      	cmp	r3, #7
 80007ca:	ddf5      	ble.n	80007b8 <I2C_CLCD_CustomFont+0x2e>
   for (int i = 0; i < 8; i++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	e006      	b.n	80007e0 <I2C_CLCD_CustomFont+0x56>
      I2C_CLCD_SendByte(1, 0b11000);
 80007d2:	2118      	movs	r1, #24
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fef9 	bl	80005cc <I2C_CLCD_SendByte>
   for (int i = 0; i < 8; i++)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3301      	adds	r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b07      	cmp	r3, #7
 80007e4:	ddf5      	ble.n	80007d2 <I2C_CLCD_CustomFont+0x48>
   for (int i = 0; i < 8; i++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	e006      	b.n	80007fa <I2C_CLCD_CustomFont+0x70>
      I2C_CLCD_SendByte(1, 0b11100);
 80007ec:	211c      	movs	r1, #28
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff feec 	bl	80005cc <I2C_CLCD_SendByte>
   for (int i = 0; i < 8; i++)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	2b07      	cmp	r3, #7
 80007fe:	ddf5      	ble.n	80007ec <I2C_CLCD_CustomFont+0x62>
   for (int i = 0; i < 8; i++)
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	e006      	b.n	8000814 <I2C_CLCD_CustomFont+0x8a>
      I2C_CLCD_SendByte(1, 0b11110);
 8000806:	211e      	movs	r1, #30
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff fedf 	bl	80005cc <I2C_CLCD_SendByte>
   for (int i = 0; i < 8; i++)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3301      	adds	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b07      	cmp	r3, #7
 8000818:	ddf5      	ble.n	8000806 <I2C_CLCD_CustomFont+0x7c>
   for (int i = 0; i < 8; i++)
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	e006      	b.n	800082e <I2C_CLCD_CustomFont+0xa4>
      I2C_CLCD_SendByte(1, 0b11111);
 8000820:	211f      	movs	r1, #31
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff fed2 	bl	80005cc <I2C_CLCD_SendByte>
   for (int i = 0; i < 8; i++)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	2b07      	cmp	r3, #7
 8000832:	ddf5      	ble.n	8000820 <I2C_CLCD_CustomFont+0x96>
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fc4f 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f851 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 f985 	bl	8000b5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000852:	f000 f963 	bl	8000b1c <MX_DMA_Init>
  MX_I2C1_Init();
 8000856:	f000 f909 	bl	8000a6c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800085a:	f000 f935 	bl	8000ac8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800085e:	f000 f8a5 	bl	80009ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
   initUart(&huart2);
 8000862:	481d      	ldr	r0, [pc, #116]	; (80008d8 <main+0x98>)
 8000864:	f000 fbb8 	bl	8000fd8 <initUart>

   printf("i2c scan start\n");
 8000868:	481c      	ldr	r0, [pc, #112]	; (80008dc <main+0x9c>)
 800086a:	f004 f8f9 	bl	8004a60 <puts>
   for(int Address = 0; Address < 256; Address++)	{
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	e010      	b.n	8000896 <main+0x56>
  	 if(HAL_I2C_IsDeviceReady(&hi2c1, Address, 0, 10) == HAL_OK)	{
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	b299      	uxth	r1, r3
 8000878:	230a      	movs	r3, #10
 800087a:	2200      	movs	r2, #0
 800087c:	4818      	ldr	r0, [pc, #96]	; (80008e0 <main+0xa0>)
 800087e:	f001 ff8f 	bl	80027a0 <HAL_I2C_IsDeviceReady>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d103      	bne.n	8000890 <main+0x50>
  		 printf("%02x is ready\n", Address);
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	4816      	ldr	r0, [pc, #88]	; (80008e4 <main+0xa4>)
 800088c:	f004 f882 	bl	8004994 <iprintf>
   for(int Address = 0; Address < 256; Address++)	{
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3301      	adds	r3, #1
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2bff      	cmp	r3, #255	; 0xff
 800089a:	ddeb      	ble.n	8000874 <main+0x34>
  	 }
	}
	printf("i2c scan end\n");
 800089c:	4812      	ldr	r0, [pc, #72]	; (80008e8 <main+0xa8>)
 800089e:	f004 f8df 	bl	8004a60 <puts>

	I2C_CLCD_init();
 80008a2:	f7ff fef3 	bl	800068c <I2C_CLCD_init>
	I2C_CLCD_GotoXY(0, 0);
 80008a6:	2100      	movs	r1, #0
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff ff1d 	bl	80006e8 <I2C_CLCD_GotoXY>
	I2C_CLCD_PutStr("                ");
 80008ae:	480f      	ldr	r0, [pc, #60]	; (80008ec <main+0xac>)
 80008b0:	f7ff ff56 	bl	8000760 <I2C_CLCD_PutStr>
	I2C_CLCD_GotoXY(0, 1);
 80008b4:	2101      	movs	r1, #1
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff ff16 	bl	80006e8 <I2C_CLCD_GotoXY>
	I2C_CLCD_PutStr("                ");
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <main+0xac>)
 80008be:	f7ff ff4f 	bl	8000760 <I2C_CLCD_PutStr>
	I2C_CLCD_GotoXY(0, 0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ff0f 	bl	80006e8 <I2C_CLCD_GotoXY>
	I2C_CLCD_CustomFont();
 80008ca:	f7ff ff5e 	bl	800078a <I2C_CLCD_CustomFont>
//		HAL_ADC_Stop(&hadc1);

		//	Present LCD
//		I2C_CLCD_Progressbar(adcValue[0]/51, 0);		//  channel 0
//		I2C_CLCD_Progressbar(adcValue[1]/51, 1);		//	channel 1
		HAL_Delay(50);
 80008ce:	2032      	movs	r0, #50	; 0x32
 80008d0:	f000 fc7c 	bl	80011cc <HAL_Delay>
 80008d4:	e7fb      	b.n	80008ce <main+0x8e>
 80008d6:	bf00      	nop
 80008d8:	20000180 	.word	0x20000180
 80008dc:	0800574c 	.word	0x0800574c
 80008e0:	2000012c 	.word	0x2000012c
 80008e4:	0800575c 	.word	0x0800575c
 80008e8:	0800576c 	.word	0x0800576c
 80008ec:	0800577c 	.word	0x0800577c

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	; 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	2230      	movs	r2, #48	; 0x30
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 f98e 	bl	8004c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <SystemClock_Config+0xb4>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <SystemClock_Config+0xb4>)
 800091e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <SystemClock_Config+0xb4>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <SystemClock_Config+0xb8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <SystemClock_Config+0xb8>)
 800093a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <SystemClock_Config+0xb8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000950:	2301      	movs	r3, #1
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000954:	2310      	movs	r3, #16
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000958:	2300      	movs	r3, #0
 800095a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	4618      	mov	r0, r3
 8000962:	f002 faa7 	bl	8002eb4 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800096c:	f000 f91e 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	230f      	movs	r3, #15
 8000972:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f002 fd0a 	bl	80033a4 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000996:	f000 f909 	bl	8000bac <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009c0:	4a28      	ldr	r2, [pc, #160]	; (8000a64 <MX_ADC1_Init+0xb8>)
 80009c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009d8:	2201      	movs	r2, #1
 80009da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009ec:	4a1e      	ldr	r2, [pc, #120]	; (8000a68 <MX_ADC1_Init+0xbc>)
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_ADC1_Init+0xb4>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_ADC1_Init+0xb4>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a0a:	4815      	ldr	r0, [pc, #84]	; (8000a60 <MX_ADC1_Init+0xb4>)
 8000a0c:	f000 fc02 	bl	8001214 <HAL_ADC_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 f8c9 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000a22:	2304      	movs	r3, #4
 8000a24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_ADC1_Init+0xb4>)
 8000a2c:	f000 fc36 	bl	800129c <HAL_ADC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a36:	f000 f8b9 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_ADC1_Init+0xb4>)
 8000a48:	f000 fc28 	bl	800129c <HAL_ADC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a52:	f000 f8ab 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000084 	.word	0x20000084
 8000a64:	40012000 	.word	0x40012000
 8000a68:	0f000001 	.word	0x0f000001

08000a6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_I2C1_Init+0x50>)
 8000a72:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <MX_I2C1_Init+0x54>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_I2C1_Init+0x50>)
 8000a78:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <MX_I2C1_Init+0x58>)
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_I2C1_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_I2C1_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_I2C1_Init+0x50>)
 8000a8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_I2C1_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_I2C1_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_I2C1_Init+0x50>)
 8000aaa:	f001 fc37 	bl	800231c <HAL_I2C_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ab4:	f000 f87a 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000012c 	.word	0x2000012c
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	00061a80 	.word	0x00061a80

08000ac8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <MX_USART2_UART_Init+0x50>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f002 fe30 	bl	8003764 <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0a:	f000 f84f 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000180 	.word	0x20000180
 8000b18:	40004400 	.word	0x40004400

08000b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_DMA_Init+0x3c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <MX_DMA_Init+0x3c>)
 8000b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_DMA_Init+0x3c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2038      	movs	r0, #56	; 0x38
 8000b44:	f000 feb3 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b48:	2038      	movs	r0, #56	; 0x38
 8000b4a:	f000 fecc 	bl	80018e6 <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_GPIO_Init+0x4c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <MX_GPIO_Init+0x4c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_GPIO_Init+0x4c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_GPIO_Init+0x4c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <MX_GPIO_Init+0x4c>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_GPIO_Init+0x4c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a2f      	ldr	r2, [pc, #188]	; (8000ce4 <HAL_ADC_MspInit+0xdc>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d157      	bne.n	8000cda <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <HAL_ADC_MspInit+0xe0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c62:	2303      	movs	r3, #3
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	481d      	ldr	r0, [pc, #116]	; (8000cec <HAL_ADC_MspInit+0xe4>)
 8000c76:	f001 f9cd 	bl	8002014 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <HAL_ADC_MspInit+0xec>)
 8000c7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000ca4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cc0:	f000 fe2c 	bl	800191c <HAL_DMA_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cca:	f7ff ff6f 	bl	8000bac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	200000cc 	.word	0x200000cc
 8000cf4:	40026410 	.word	0x40026410

08000cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_I2C_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12b      	bne.n	8000d72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d36:	23c0      	movs	r3, #192	; 0xc0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d46:	2304      	movs	r3, #4
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <HAL_I2C_MspInit+0x8c>)
 8000d52:	f001 f95f 	bl	8002014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020400 	.word	0x40020400

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <HAL_UART_MspInit+0x94>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d133      	bne.n	8000e12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <HAL_UART_MspInit+0x98>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <HAL_UART_MspInit+0x98>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0x98>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_UART_MspInit+0x98>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <HAL_UART_MspInit+0x98>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_UART_MspInit+0x98>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000de2:	230c      	movs	r3, #12
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df2:	2307      	movs	r3, #7
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <HAL_UART_MspInit+0x9c>)
 8000dfe:	f001 f909 	bl	8002014 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2026      	movs	r0, #38	; 0x26
 8000e08:	f000 fd51 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e0c:	2026      	movs	r0, #38	; 0x26
 8000e0e:	f000 fd6a 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40004400 	.word	0x40004400
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 f98a 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <USART2_IRQHandler+0x10>)
 8000e82:	f002 fd6f 	bl	8003964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000180 	.word	0x20000180

08000e90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA2_Stream0_IRQHandler+0x10>)
 8000e96:	f000 fe81 	bl	8001b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000cc 	.word	0x200000cc

08000ea4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e00a      	b.n	8000ecc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb6:	f3af 8000 	nop.w
 8000eba:	4601      	mov	r1, r0
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf0      	blt.n	8000eb6 <_read+0x12>
  }

  return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f06:	605a      	str	r2, [r3, #4]
  return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_isatty>:

int _isatty(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d207      	bcs.n	8000f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f78:	f003 fea0 	bl	8004cbc <__errno>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e009      	b.n	8000f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <_sbrk+0x64>)
 8000f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20020000 	.word	0x20020000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	200001c8 	.word	0x200001c8
 8000fb0:	20000428 	.word	0x20000428

08000fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <SystemInit+0x20>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <SystemInit+0x20>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <initUart>:
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// init device
void initUart(UART_HandleTypeDef *inHuart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <initUart+0x24>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <initUart+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2201      	movs	r2, #1
 8000fec:	4904      	ldr	r1, [pc, #16]	; (8001000 <initUart+0x28>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fc93 	bl	800391a <HAL_UART_Receive_IT>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200001cc 	.word	0x200001cc
 8001000:	200002d3 	.word	0x200002d3

08001004 <HAL_UART_RxCpltCallback>:

// process received charactor
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_RxCpltCallback+0x50>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	4910      	ldr	r1, [pc, #64]	; (8001054 <HAL_UART_RxCpltCallback+0x50>)
 8001014:	600a      	str	r2, [r1, #0]
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_UART_RxCpltCallback+0x54>)
 8001018:	7811      	ldrb	r1, [r2, #0]
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <HAL_UART_RxCpltCallback+0x58>)
 800101c:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_UART_RxCpltCallback+0x50>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_UART_RxCpltCallback+0x5c>)
 8001024:	fb83 1302 	smull	r1, r3, r3, r2
 8001028:	4413      	add	r3, r2
 800102a:	11d9      	asrs	r1, r3, #7
 800102c:	17d3      	asrs	r3, r2, #31
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	460b      	mov	r3, r1
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	1a5b      	subs	r3, r3, r1
 8001036:	1ad1      	subs	r1, r2, r3
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_UART_RxCpltCallback+0x50>)
 800103a:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_UART_RxCpltCallback+0x60>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	4905      	ldr	r1, [pc, #20]	; (8001058 <HAL_UART_RxCpltCallback+0x54>)
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fc68 	bl	800391a <HAL_UART_Receive_IT>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001d0 	.word	0x200001d0
 8001058:	200002d3 	.word	0x200002d3
 800105c:	200001d4 	.word	0x200001d4
 8001060:	80808081 	.word	0x80808081
 8001064:	200001cc 	.word	0x200001cc

08001068 <_write>:
	rxBufferGp %= rxBufferMax;
	return result;
}

int _write(int file, char*p, int len)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t *)p, len, 20);
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <_write+0x28>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	b29a      	uxth	r2, r3
 800107c:	2314      	movs	r3, #20
 800107e:	68b9      	ldr	r1, [r7, #8]
 8001080:	f002 fbc0 	bl	8003804 <HAL_UART_Transmit>
	return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001cc 	.word	0x200001cc

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001098:	f7ff ff8c 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	; (80010d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	; (80010e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f003 fe01 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff fbbb 	bl	8000840 <main>
  bx  lr    
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010d8:	080057f4 	.word	0x080057f4
  ldr r2, =_sbss
 80010dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010e0:	20000424 	.word	0x20000424

080010e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_Init+0x40>)
 80010f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_Init+0x40>)
 80010fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x40>)
 800110a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 fbc1 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	200f      	movs	r0, #15
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fd4c 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023c00 	.word	0x40023c00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fbd9 	bl	8001902 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 fba1 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008
 80011b0:	200002d4 	.word	0x200002d4

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200002d4 	.word	0x200002d4

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e033      	b.n	8001292 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d109      	bne.n	8001246 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fce8 	bl	8000c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d118      	bne.n	8001284 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800125a:	f023 0302 	bic.w	r3, r3, #2
 800125e:	f043 0202 	orr.w	r2, r3, #2
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f94a 	bl	8001500 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	f043 0201 	orr.w	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
 8001282:	e001      	b.n	8001288 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x1c>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e113      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x244>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b09      	cmp	r3, #9
 80012c6:	d925      	bls.n	8001314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68d9      	ldr	r1, [r3, #12]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	3b1e      	subs	r3, #30
 80012de:	2207      	movs	r2, #7
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43da      	mvns	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	400a      	ands	r2, r1
 80012ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68d9      	ldr	r1, [r3, #12]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	4603      	mov	r3, r0
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4403      	add	r3, r0
 8001306:	3b1e      	subs	r3, #30
 8001308:	409a      	lsls	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	e022      	b.n	800135a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6919      	ldr	r1, [r3, #16]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	2207      	movs	r2, #7
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	400a      	ands	r2, r1
 8001336:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6919      	ldr	r1, [r3, #16]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	4603      	mov	r3, r0
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4403      	add	r3, r0
 8001350:	409a      	lsls	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b06      	cmp	r3, #6
 8001360:	d824      	bhi.n	80013ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	3b05      	subs	r3, #5
 8001374:	221f      	movs	r2, #31
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	400a      	ands	r2, r1
 8001382:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3b05      	subs	r3, #5
 800139e:	fa00 f203 	lsl.w	r2, r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
 80013aa:	e04c      	b.n	8001446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b0c      	cmp	r3, #12
 80013b2:	d824      	bhi.n	80013fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	3b23      	subs	r3, #35	; 0x23
 80013c6:	221f      	movs	r2, #31
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43da      	mvns	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	400a      	ands	r2, r1
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b23      	subs	r3, #35	; 0x23
 80013f0:	fa00 f203 	lsl.w	r2, r0, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	631a      	str	r2, [r3, #48]	; 0x30
 80013fc:	e023      	b.n	8001446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	3b41      	subs	r3, #65	; 0x41
 8001410:	221f      	movs	r2, #31
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	400a      	ands	r2, r1
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b41      	subs	r3, #65	; 0x41
 800143a:	fa00 f203 	lsl.w	r2, r0, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <HAL_ADC_ConfigChannel+0x250>)
 8001448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <HAL_ADC_ConfigChannel+0x254>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d10f      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1d8>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b12      	cmp	r3, #18
 800145a:	d10b      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_ADC_ConfigChannel+0x254>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12b      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x23a>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <HAL_ADC_ConfigChannel+0x258>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d003      	beq.n	8001490 <HAL_ADC_ConfigChannel+0x1f4>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b11      	cmp	r3, #17
 800148e:	d122      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <HAL_ADC_ConfigChannel+0x258>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d111      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_ADC_ConfigChannel+0x25c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_ADC_ConfigChannel+0x260>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	0c9a      	lsrs	r2, r3, #18
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014c8:	e002      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f9      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40012300 	.word	0x40012300
 80014f0:	40012000 	.word	0x40012000
 80014f4:	10000012 	.word	0x10000012
 80014f8:	20000000 	.word	0x20000000
 80014fc:	431bde83 	.word	0x431bde83

08001500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001508:	4b79      	ldr	r3, [pc, #484]	; (80016f0 <ADC_Init+0x1f0>)
 800150a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	431a      	orrs	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	021a      	lsls	r2, r3, #8
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800157a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	4a58      	ldr	r2, [pc, #352]	; (80016f4 <ADC_Init+0x1f4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d022      	beq.n	80015de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6899      	ldr	r1, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6899      	ldr	r1, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	e00f      	b.n	80015fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0202 	bic.w	r2, r2, #2
 800160c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6899      	ldr	r1, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7e1b      	ldrb	r3, [r3, #24]
 8001618:	005a      	lsls	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01b      	beq.n	8001664 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800163a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800164a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6859      	ldr	r1, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	3b01      	subs	r3, #1
 8001658:	035a      	lsls	r2, r3, #13
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	e007      	b.n	8001674 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001672:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	3b01      	subs	r3, #1
 8001690:	051a      	lsls	r2, r3, #20
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016b6:	025a      	lsls	r2, r3, #9
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6899      	ldr	r1, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	029a      	lsls	r2, r3, #10
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	609a      	str	r2, [r3, #8]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40012300 	.word	0x40012300
 80016f4:	0f000001 	.word	0x0f000001

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4907      	ldr	r1, [pc, #28]	; (8001794 <__NVIC_EnableIRQ+0x38>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f202 	lsl.w	r2, r0, r2
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	; (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	; (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	; 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff ff8e 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff29 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff3e 	bl	8001740 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff8e 	bl	80017ec <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5d 	bl	8001798 <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff31 	bl	800175c <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa2 	bl	8001854 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff fc44 	bl	80011b4 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e099      	b.n	8001a6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001958:	e00f      	b.n	800197a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800195a:	f7ff fc2b 	bl	80011b4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b05      	cmp	r3, #5
 8001966:	d908      	bls.n	800197a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2203      	movs	r2, #3
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e078      	b.n	8001a6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e8      	bne.n	800195a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <HAL_DMA_Init+0x158>)
 8001994:	4013      	ands	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d107      	bne.n	80019e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4313      	orrs	r3, r2
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f023 0307 	bic.w	r3, r3, #7
 80019fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d117      	bne.n	8001a3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00e      	beq.n	8001a3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fa7b 	bl	8001f1c <DMA_CheckFifoParam>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2240      	movs	r2, #64	; 0x40
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e016      	b.n	8001a6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fa32 	bl	8001eb0 <DMA_CalcBaseAndBitshift>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	223f      	movs	r2, #63	; 0x3f
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	f010803f 	.word	0xf010803f

08001a78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a86:	f7ff fb95 	bl	80011b4 <HAL_GetTick>
 8001a8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d008      	beq.n	8001aaa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e052      	b.n	8001b50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0216 	bic.w	r2, r2, #22
 8001ab8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d103      	bne.n	8001ada <HAL_DMA_Abort+0x62>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0208 	bic.w	r2, r2, #8
 8001ae8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afa:	e013      	b.n	8001b24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001afc:	f7ff fb5a 	bl	80011b4 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d90c      	bls.n	8001b24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2203      	movs	r2, #3
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e015      	b.n	8001b50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1e4      	bne.n	8001afc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	223f      	movs	r2, #63	; 0x3f
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d004      	beq.n	8001b76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00c      	b.n	8001b90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2205      	movs	r2, #5
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ba8:	4b8e      	ldr	r3, [pc, #568]	; (8001de4 <HAL_DMA_IRQHandler+0x248>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a8e      	ldr	r2, [pc, #568]	; (8001de8 <HAL_DMA_IRQHandler+0x24c>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01a      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0204 	bic.w	r2, r2, #4
 8001bee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d012      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	2204      	movs	r2, #4
 8001c44:	409a      	lsls	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d012      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	2204      	movs	r2, #4
 8001c62:	409a      	lsls	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f043 0204 	orr.w	r2, r3, #4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	2210      	movs	r2, #16
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d043      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03c      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	2210      	movs	r2, #16
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d018      	beq.n	8001cde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d108      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d024      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
 8001cca:	e01f      	b.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
 8001cdc:	e016      	b.n	8001d0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0208 	bic.w	r2, r2, #8
 8001cfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2220      	movs	r2, #32
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 808f 	beq.w	8001e3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8087 	beq.w	8001e3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	2220      	movs	r2, #32
 8001d34:	409a      	lsls	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d136      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0216 	bic.w	r2, r2, #22
 8001d54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <HAL_DMA_IRQHandler+0x1da>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0208 	bic.w	r2, r2, #8
 8001d84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	223f      	movs	r2, #63	; 0x3f
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d07e      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
        }
        return;
 8001db2:	e079      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01d      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d031      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
 8001de0:	e02c      	b.n	8001e3c <HAL_DMA_IRQHandler+0x2a0>
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000
 8001de8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d023      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4798      	blx	r3
 8001dfc:	e01e      	b.n	8001e3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10f      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0210 	bic.w	r2, r2, #16
 8001e1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d032      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d022      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2205      	movs	r2, #5
 8001e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d307      	bcc.n	8001e84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f2      	bne.n	8001e68 <HAL_DMA_IRQHandler+0x2cc>
 8001e82:	e000      	b.n	8001e86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
 8001ea6:	e000      	b.n	8001eaa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ea8:	bf00      	nop
    }
  }
}
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	3b10      	subs	r3, #16
 8001ec0:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <DMA_CalcBaseAndBitshift+0x64>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <DMA_CalcBaseAndBitshift+0x68>)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d909      	bls.n	8001ef2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ee6:	f023 0303 	bic.w	r3, r3, #3
 8001eea:	1d1a      	adds	r2, r3, #4
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	659a      	str	r2, [r3, #88]	; 0x58
 8001ef0:	e007      	b.n	8001f02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	aaaaaaab 	.word	0xaaaaaaab
 8001f18:	080057a8 	.word	0x080057a8

08001f1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d11f      	bne.n	8001f76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d856      	bhi.n	8001fea <DMA_CheckFifoParam+0xce>
 8001f3c:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <DMA_CheckFifoParam+0x28>)
 8001f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f42:	bf00      	nop
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f67 	.word	0x08001f67
 8001f4c:	08001f55 	.word	0x08001f55
 8001f50:	08001feb 	.word	0x08001feb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d046      	beq.n	8001fee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f64:	e043      	b.n	8001fee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f6e:	d140      	bne.n	8001ff2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f74:	e03d      	b.n	8001ff2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f7e:	d121      	bne.n	8001fc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d837      	bhi.n	8001ff6 <DMA_CheckFifoParam+0xda>
 8001f86:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <DMA_CheckFifoParam+0x70>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08001f9d 	.word	0x08001f9d
 8001f90:	08001fa3 	.word	0x08001fa3
 8001f94:	08001f9d 	.word	0x08001f9d
 8001f98:	08001fb5 	.word	0x08001fb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa0:	e030      	b.n	8002004 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d025      	beq.n	8001ffa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb2:	e022      	b.n	8001ffa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fbc:	d11f      	bne.n	8001ffe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fc2:	e01c      	b.n	8001ffe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d903      	bls.n	8001fd2 <DMA_CheckFifoParam+0xb6>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d003      	beq.n	8001fd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fd0:	e018      	b.n	8002004 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd6:	e015      	b.n	8002004 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00e      	beq.n	8002002 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe8:	e00b      	b.n	8002002 <DMA_CheckFifoParam+0xe6>
      break;
 8001fea:	bf00      	nop
 8001fec:	e00a      	b.n	8002004 <DMA_CheckFifoParam+0xe8>
      break;
 8001fee:	bf00      	nop
 8001ff0:	e008      	b.n	8002004 <DMA_CheckFifoParam+0xe8>
      break;
 8001ff2:	bf00      	nop
 8001ff4:	e006      	b.n	8002004 <DMA_CheckFifoParam+0xe8>
      break;
 8001ff6:	bf00      	nop
 8001ff8:	e004      	b.n	8002004 <DMA_CheckFifoParam+0xe8>
      break;
 8001ffa:	bf00      	nop
 8001ffc:	e002      	b.n	8002004 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ffe:	bf00      	nop
 8002000:	e000      	b.n	8002004 <DMA_CheckFifoParam+0xe8>
      break;
 8002002:	bf00      	nop
    }
  } 
  
  return status; 
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e159      	b.n	80022e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002030:	2201      	movs	r2, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8148 	bne.w	80022de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d005      	beq.n	8002066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002062:	2b02      	cmp	r3, #2
 8002064:	d130      	bne.n	80020c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800209c:	2201      	movs	r2, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 0201 	and.w	r2, r3, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d017      	beq.n	8002104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d123      	bne.n	8002158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	08da      	lsrs	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3208      	adds	r2, #8
 8002118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	08da      	lsrs	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3208      	adds	r2, #8
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0203 	and.w	r2, r3, #3
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80a2 	beq.w	80022de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b57      	ldr	r3, [pc, #348]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a56      	ldr	r2, [pc, #344]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b54      	ldr	r3, [pc, #336]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021b6:	4a52      	ldr	r2, [pc, #328]	; (8002300 <HAL_GPIO_Init+0x2ec>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a49      	ldr	r2, [pc, #292]	; (8002304 <HAL_GPIO_Init+0x2f0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x202>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a48      	ldr	r2, [pc, #288]	; (8002308 <HAL_GPIO_Init+0x2f4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x1fe>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a47      	ldr	r2, [pc, #284]	; (800230c <HAL_GPIO_Init+0x2f8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x1fa>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a46      	ldr	r2, [pc, #280]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x1f6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a45      	ldr	r2, [pc, #276]	; (8002314 <HAL_GPIO_Init+0x300>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x1f2>
 8002202:	2304      	movs	r3, #4
 8002204:	e008      	b.n	8002218 <HAL_GPIO_Init+0x204>
 8002206:	2307      	movs	r3, #7
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x204>
 800220a:	2303      	movs	r3, #3
 800220c:	e004      	b.n	8002218 <HAL_GPIO_Init+0x204>
 800220e:	2302      	movs	r3, #2
 8002210:	e002      	b.n	8002218 <HAL_GPIO_Init+0x204>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_GPIO_Init+0x204>
 8002216:	2300      	movs	r3, #0
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	f002 0203 	and.w	r2, r2, #3
 800221e:	0092      	lsls	r2, r2, #2
 8002220:	4093      	lsls	r3, r2
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002228:	4935      	ldr	r1, [pc, #212]	; (8002300 <HAL_GPIO_Init+0x2ec>)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_GPIO_Init+0x304>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225a:	4a2f      	ldr	r2, [pc, #188]	; (8002318 <HAL_GPIO_Init+0x304>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_GPIO_Init+0x304>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <HAL_GPIO_Init+0x304>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_GPIO_Init+0x304>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d8:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	2b0f      	cmp	r3, #15
 80022e8:	f67f aea2 	bls.w	8002030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40013800 	.word	0x40013800
 8002304:	40020000 	.word	0x40020000
 8002308:	40020400 	.word	0x40020400
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00
 8002314:	40021000 	.word	0x40021000
 8002318:	40013c00 	.word	0x40013c00

0800231c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e12b      	b.n	8002586 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fcd8 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800236e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800237e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002380:	f001 f9c8 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8002384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a81      	ldr	r2, [pc, #516]	; (8002590 <HAL_I2C_Init+0x274>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d807      	bhi.n	80023a0 <HAL_I2C_Init+0x84>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_I2C_Init+0x278>)
 8002394:	4293      	cmp	r3, r2
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e006      	b.n	80023ae <HAL_I2C_Init+0x92>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4a7d      	ldr	r2, [pc, #500]	; (8002598 <HAL_I2C_Init+0x27c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	bf94      	ite	ls
 80023a8:	2301      	movls	r3, #1
 80023aa:	2300      	movhi	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0e7      	b.n	8002586 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a78      	ldr	r2, [pc, #480]	; (800259c <HAL_I2C_Init+0x280>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0c9b      	lsrs	r3, r3, #18
 80023c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a6a      	ldr	r2, [pc, #424]	; (8002590 <HAL_I2C_Init+0x274>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d802      	bhi.n	80023f0 <HAL_I2C_Init+0xd4>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3301      	adds	r3, #1
 80023ee:	e009      	b.n	8002404 <HAL_I2C_Init+0xe8>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_I2C_Init+0x284>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	3301      	adds	r3, #1
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	430b      	orrs	r3, r1
 800240a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002416:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	495c      	ldr	r1, [pc, #368]	; (8002590 <HAL_I2C_Init+0x274>)
 8002420:	428b      	cmp	r3, r1
 8002422:	d819      	bhi.n	8002458 <HAL_I2C_Init+0x13c>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1e59      	subs	r1, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002432:	1c59      	adds	r1, r3, #1
 8002434:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002438:	400b      	ands	r3, r1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_I2C_Init+0x138>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e59      	subs	r1, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fbb1 f3f3 	udiv	r3, r1, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002452:	e051      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 8002454:	2304      	movs	r3, #4
 8002456:	e04f      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d111      	bne.n	8002484 <HAL_I2C_Init+0x168>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1e58      	subs	r0, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e012      	b.n	80024aa <HAL_I2C_Init+0x18e>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e58      	subs	r0, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	0099      	lsls	r1, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	fbb0 f3f3 	udiv	r3, r0, r3
 800249a:	3301      	adds	r3, #1
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Init+0x196>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e022      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10e      	bne.n	80024d8 <HAL_I2C_Init+0x1bc>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e58      	subs	r0, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	440b      	add	r3, r1
 80024c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d6:	e00f      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	0099      	lsls	r1, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	6809      	ldr	r1, [r1, #0]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6911      	ldr	r1, [r2, #16]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	4311      	orrs	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	000186a0 	.word	0x000186a0
 8002594:	001e847f 	.word	0x001e847f
 8002598:	003d08ff 	.word	0x003d08ff
 800259c:	431bde83 	.word	0x431bde83
 80025a0:	10624dd3 	.word	0x10624dd3

080025a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	817b      	strh	r3, [r7, #10]
 80025b4:	4613      	mov	r3, r2
 80025b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7fe fdfc 	bl	80011b4 <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	f040 80e0 	bne.w	800278c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2319      	movs	r3, #25
 80025d2:	2201      	movs	r2, #1
 80025d4:	4970      	ldr	r1, [pc, #448]	; (8002798 <HAL_I2C_Master_Transmit+0x1f4>)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fa92 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	e0d3      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_I2C_Master_Transmit+0x50>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e0cc      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d007      	beq.n	800261a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002628:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2221      	movs	r2, #33	; 0x21
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2210      	movs	r2, #16
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	893a      	ldrh	r2, [r7, #8]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a50      	ldr	r2, [pc, #320]	; (800279c <HAL_I2C_Master_Transmit+0x1f8>)
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f9ca 	bl	80029fc <I2C_MasterRequestWrite>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e08d      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002688:	e066      	b.n	8002758 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	6a39      	ldr	r1, [r7, #32]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fb50 	bl	8002d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d107      	bne.n	80026b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06b      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d11b      	bne.n	800272c <HAL_I2C_Master_Transmit+0x188>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d017      	beq.n	800272c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6a39      	ldr	r1, [r7, #32]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fb47 	bl	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00d      	beq.n	8002758 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b04      	cmp	r3, #4
 8002742:	d107      	bne.n	8002754 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002752:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e01a      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	d194      	bne.n	800268a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	00100002 	.word	0x00100002
 800279c:	ffff0000 	.word	0xffff0000

080027a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	460b      	mov	r3, r1
 80027ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7fe fd00 	bl	80011b4 <HAL_GetTick>
 80027b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	f040 8111 	bne.w	80029ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2319      	movs	r3, #25
 80027ce:	2201      	movs	r2, #1
 80027d0:	4988      	ldr	r1, [pc, #544]	; (80029f4 <HAL_I2C_IsDeviceReady+0x254>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f994 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
 80027e0:	e104      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_I2C_IsDeviceReady+0x50>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e0fd      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d007      	beq.n	8002816 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002824:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2224      	movs	r2, #36	; 0x24
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a70      	ldr	r2, [pc, #448]	; (80029f8 <HAL_I2C_IsDeviceReady+0x258>)
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002848:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f952 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00d      	beq.n	800287e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002870:	d103      	bne.n	800287a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0b6      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800288c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800288e:	f7fe fc91 	bl	80011b4 <HAL_GetTick>
 8002892:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028c2:	e025      	b.n	8002910 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028c4:	f7fe fc76 	bl	80011b4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d302      	bcc.n	80028da <HAL_I2C_IsDeviceReady+0x13a>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d103      	bne.n	80028e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	22a0      	movs	r2, #160	; 0xa0
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2ba0      	cmp	r3, #160	; 0xa0
 800291a:	d005      	beq.n	8002928 <HAL_I2C_IsDeviceReady+0x188>
 800291c:	7dfb      	ldrb	r3, [r7, #23]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <HAL_I2C_IsDeviceReady+0x188>
 8002922:	7dbb      	ldrb	r3, [r7, #22]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0cd      	beq.n	80028c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d129      	bne.n	8002992 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2319      	movs	r3, #25
 800296a:	2201      	movs	r2, #1
 800296c:	4921      	ldr	r1, [pc, #132]	; (80029f4 <HAL_I2C_IsDeviceReady+0x254>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f8c6 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e036      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e02c      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2319      	movs	r3, #25
 80029b2:	2201      	movs	r2, #1
 80029b4:	490f      	ldr	r1, [pc, #60]	; (80029f4 <HAL_I2C_IsDeviceReady+0x254>)
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f8a2 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e012      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	3301      	adds	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	f4ff af32 	bcc.w	800283a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029ea:	2302      	movs	r3, #2
  }
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	00100002 	.word	0x00100002
 80029f8:	ffff0000 	.word	0xffff0000

080029fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d006      	beq.n	8002a26 <I2C_MasterRequestWrite+0x2a>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d003      	beq.n	8002a26 <I2C_MasterRequestWrite+0x2a>
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a24:	d108      	bne.n	8002a38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e00b      	b.n	8002a50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	2b12      	cmp	r3, #18
 8002a3e:	d107      	bne.n	8002a50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f84f 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00d      	beq.n	8002a84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a76:	d103      	bne.n	8002a80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e035      	b.n	8002af0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a8c:	d108      	bne.n	8002aa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a8e:	897b      	ldrh	r3, [r7, #10]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a9c:	611a      	str	r2, [r3, #16]
 8002a9e:	e01b      	b.n	8002ad8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002aa0:	897b      	ldrh	r3, [r7, #10]
 8002aa2:	11db      	asrs	r3, r3, #7
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f003 0306 	and.w	r3, r3, #6
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f063 030f 	orn	r3, r3, #15
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	490e      	ldr	r1, [pc, #56]	; (8002af8 <I2C_MasterRequestWrite+0xfc>)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f898 	bl	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e010      	b.n	8002af0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4907      	ldr	r1, [pc, #28]	; (8002afc <I2C_MasterRequestWrite+0x100>)
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f888 	bl	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	00010008 	.word	0x00010008
 8002afc:	00010002 	.word	0x00010002

08002b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	e048      	b.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d044      	beq.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe fb4b 	bl	80011b4 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d139      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10d      	bne.n	8002b56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	e00c      	b.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d116      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e023      	b.n	8002bec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10d      	bne.n	8002bca <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	e00c      	b.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d093      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c02:	e071      	b.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c12:	d123      	bne.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f043 0204 	orr.w	r2, r3, #4
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e067      	b.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d041      	beq.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c64:	f7fe faa6 	bl	80011b4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d302      	bcc.n	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d136      	bne.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10c      	bne.n	8002c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	e00b      	b.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	43da      	mvns	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf14      	ite	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	2300      	moveq	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d016      	beq.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e021      	b.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	0c1b      	lsrs	r3, r3, #16
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10c      	bne.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e00b      	b.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf14      	ite	ne
 8002d1e:	2301      	movne	r3, #1
 8002d20:	2300      	moveq	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f47f af6d 	bne.w	8002c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d40:	e034      	b.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f886 	bl	8002e54 <I2C_IsAcknowledgeFailed>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e034      	b.n	8002dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d028      	beq.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7fe fa2b 	bl	80011b4 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11d      	bne.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b80      	cmp	r3, #128	; 0x80
 8002d7c:	d016      	beq.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e007      	b.n	8002dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d1c3      	bne.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd0:	e034      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f83e 	bl	8002e54 <I2C_IsAcknowledgeFailed>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e034      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d028      	beq.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe f9e3 	bl	80011b4 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11d      	bne.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d016      	beq.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e007      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d1c3      	bne.n	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6a:	d11b      	bne.n	8002ea4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e267      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d075      	beq.n	8002fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed2:	4b88      	ldr	r3, [pc, #544]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d00c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4b85      	ldr	r3, [pc, #532]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d112      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4b82      	ldr	r3, [pc, #520]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef6:	d10b      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	4b7e      	ldr	r3, [pc, #504]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d05b      	beq.n	8002fbc <HAL_RCC_OscConfig+0x108>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d157      	bne.n	8002fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e242      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d106      	bne.n	8002f28 <HAL_RCC_OscConfig+0x74>
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a75      	ldr	r2, [pc, #468]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e01d      	b.n	8002f64 <HAL_RCC_OscConfig+0xb0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x98>
 8002f32:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6f      	ldr	r2, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6c      	ldr	r2, [pc, #432]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0xb0>
 8002f4c:	4b69      	ldr	r3, [pc, #420]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a68      	ldr	r2, [pc, #416]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b66      	ldr	r3, [pc, #408]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a65      	ldr	r2, [pc, #404]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f922 	bl	80011b4 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe f91e 	bl	80011b4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e207      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b5b      	ldr	r3, [pc, #364]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0xc0>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe f90e 	bl	80011b4 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe f90a 	bl	80011b4 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1f3      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	4b51      	ldr	r3, [pc, #324]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0xe8>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d063      	beq.n	8003092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fca:	4b4a      	ldr	r3, [pc, #296]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe2:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x152>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1c7      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4937      	ldr	r1, [pc, #220]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	e03a      	b.n	8003092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d020      	beq.n	8003066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_RCC_OscConfig+0x244>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fe f8c3 	bl	80011b4 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003032:	f7fe f8bf 	bl	80011b4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1a8      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4925      	ldr	r1, [pc, #148]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	e015      	b.n	8003092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCC_OscConfig+0x244>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe f8a2 	bl	80011b4 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003074:	f7fe f89e 	bl	80011b4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e187      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d036      	beq.n	800310c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_RCC_OscConfig+0x248>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fe f882 	bl	80011b4 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b4:	f7fe f87e 	bl	80011b4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e167      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 80030c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x200>
 80030d2:	e01b      	b.n	800310c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_OscConfig+0x248>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fe f86b 	bl	80011b4 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	e00e      	b.n	8003100 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe f867 	bl	80011b4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d907      	bls.n	8003100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e150      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
 80030f4:	40023800 	.word	0x40023800
 80030f8:	42470000 	.word	0x42470000
 80030fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ea      	bne.n	80030e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8097 	beq.w	8003248 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b81      	ldr	r3, [pc, #516]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	4b7d      	ldr	r3, [pc, #500]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a7c      	ldr	r2, [pc, #496]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	; 0x40
 800313a:	4b7a      	ldr	r3, [pc, #488]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b77      	ldr	r3, [pc, #476]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b74      	ldr	r3, [pc, #464]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a73      	ldr	r2, [pc, #460]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fe f827 	bl	80011b4 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fe f823 	bl	80011b4 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e10c      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x2ea>
 8003190:	4b64      	ldr	r3, [pc, #400]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a63      	ldr	r2, [pc, #396]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	e01c      	b.n	80031d8 <HAL_RCC_OscConfig+0x324>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x30c>
 80031a6:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a5e      	ldr	r2, [pc, #376]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
 80031b2:	4b5c      	ldr	r3, [pc, #368]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a5b      	ldr	r2, [pc, #364]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0x324>
 80031c0:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a57      	ldr	r2, [pc, #348]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	4b55      	ldr	r3, [pc, #340]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a54      	ldr	r2, [pc, #336]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d015      	beq.n	800320c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fd ffe8 	bl	80011b4 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fd ffe4 	bl	80011b4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0cb      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fe:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ee      	beq.n	80031e8 <HAL_RCC_OscConfig+0x334>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fd ffd2 	bl	80011b4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fd ffce 	bl	80011b4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0b5      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322a:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1ee      	bne.n	8003214 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323c:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	4a38      	ldr	r2, [pc, #224]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003246:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a1 	beq.w	8003394 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003252:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d05c      	beq.n	8003318 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d141      	bne.n	80032ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_OscConfig+0x478>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fd ffa2 	bl	80011b4 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fd ff9e 	bl	80011b4 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e087      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	019b      	lsls	r3, r3, #6
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	491b      	ldr	r1, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x478>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fd ff77 	bl	80011b4 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fd ff73 	bl	80011b4 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e05c      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x416>
 80032e8:	e054      	b.n	8003394 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_OscConfig+0x478>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fd ff60 	bl	80011b4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fd ff5c 	bl	80011b4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e045      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x444>
 8003316:	e03d      	b.n	8003394 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e038      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000
 800332c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x4ec>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d028      	beq.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d121      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d11a      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003366:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	4293      	cmp	r3, r2
 800336a:	d111      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800

080033a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0cc      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b8:	4b68      	ldr	r3, [pc, #416]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d90c      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b65      	ldr	r3, [pc, #404]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b8      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a58      	ldr	r2, [pc, #352]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800341a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	494d      	ldr	r1, [pc, #308]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d044      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d119      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d003      	beq.n	8003462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345e:	2b03      	cmp	r3, #3
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e067      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4934      	ldr	r1, [pc, #208]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003494:	f7fd fe8e 	bl	80011b4 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7fd fe8a 	bl	80011b4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e04f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 020c 	and.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d1eb      	bne.n	800349c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d20c      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e032      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4916      	ldr	r1, [pc, #88]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490e      	ldr	r1, [pc, #56]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800352a:	f000 f821 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800352e:	4602      	mov	r2, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	490a      	ldr	r1, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	5ccb      	ldrb	r3, [r1, r3]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	4a09      	ldr	r2, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fdee 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023c00 	.word	0x40023c00
 8003560:	40023800 	.word	0x40023800
 8003564:	08005790 	.word	0x08005790
 8003568:	20000000 	.word	0x20000000
 800356c:	20000004 	.word	0x20000004

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b090      	sub	sp, #64	; 0x40
 8003576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
 800357c:	2300      	movs	r3, #0
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003580:	2300      	movs	r3, #0
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003588:	4b59      	ldr	r3, [pc, #356]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d00d      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003594:	2b08      	cmp	r3, #8
 8003596:	f200 80a1 	bhi.w	80036dc <HAL_RCC_GetSysClockFreq+0x16c>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x34>
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x3a>
 80035a2:	e09b      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b53      	ldr	r3, [pc, #332]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80035a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80035a8:	e09b      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035aa:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035ae:	e098      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b0:	4b4f      	ldr	r3, [pc, #316]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ba:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d028      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c6:	4b4a      	ldr	r3, [pc, #296]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	2200      	movs	r2, #0
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	627a      	str	r2, [r7, #36]	; 0x24
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035d8:	2100      	movs	r1, #0
 80035da:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035dc:	fb03 f201 	mul.w	r2, r3, r1
 80035e0:	2300      	movs	r3, #0
 80035e2:	fb00 f303 	mul.w	r3, r0, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	4a43      	ldr	r2, [pc, #268]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035ea:	fba0 1202 	umull	r1, r2, r0, r2
 80035ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035f0:	460a      	mov	r2, r1
 80035f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80035f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f6:	4413      	add	r3, r2
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fc:	2200      	movs	r2, #0
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	61fa      	str	r2, [r7, #28]
 8003602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003606:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800360a:	f7fc fe39 	bl	8000280 <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4613      	mov	r3, r2
 8003614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003616:	e053      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003618:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	2200      	movs	r2, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	617a      	str	r2, [r7, #20]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800362a:	f04f 0b00 	mov.w	fp, #0
 800362e:	4652      	mov	r2, sl
 8003630:	465b      	mov	r3, fp
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f04f 0100 	mov.w	r1, #0
 800363a:	0159      	lsls	r1, r3, #5
 800363c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003640:	0150      	lsls	r0, r2, #5
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	ebb2 080a 	subs.w	r8, r2, sl
 800364a:	eb63 090b 	sbc.w	r9, r3, fp
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800365a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800365e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003662:	ebb2 0408 	subs.w	r4, r2, r8
 8003666:	eb63 0509 	sbc.w	r5, r3, r9
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	00eb      	lsls	r3, r5, #3
 8003674:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003678:	00e2      	lsls	r2, r4, #3
 800367a:	4614      	mov	r4, r2
 800367c:	461d      	mov	r5, r3
 800367e:	eb14 030a 	adds.w	r3, r4, sl
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	eb45 030b 	adc.w	r3, r5, fp
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003696:	4629      	mov	r1, r5
 8003698:	028b      	lsls	r3, r1, #10
 800369a:	4621      	mov	r1, r4
 800369c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036a0:	4621      	mov	r1, r4
 80036a2:	028a      	lsls	r2, r1, #10
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036aa:	2200      	movs	r2, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	60fa      	str	r2, [r7, #12]
 80036b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b4:	f7fc fde4 	bl	8000280 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	3301      	adds	r3, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3740      	adds	r7, #64	; 0x40
 80036e8:	46bd      	mov	sp, r7
 80036ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	017d7840 	.word	0x017d7840

080036fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <HAL_RCC_GetHCLKFreq+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000000 	.word	0x20000000

08003714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003718:	f7ff fff0 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0a9b      	lsrs	r3, r3, #10
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4903      	ldr	r1, [pc, #12]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	080057a0 	.word	0x080057a0

0800373c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003740:	f7ff ffdc 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	0b5b      	lsrs	r3, r3, #13
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	4903      	ldr	r1, [pc, #12]	; (8003760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	080057a0 	.word	0x080057a0

08003764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e042      	b.n	80037fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd fafc 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fdbd 	bl	8004328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b20      	cmp	r3, #32
 8003822:	d175      	bne.n	8003910 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_UART_Transmit+0x2c>
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e06e      	b.n	8003912 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2221      	movs	r2, #33	; 0x21
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003842:	f7fd fcb7 	bl	80011b4 <HAL_GetTick>
 8003846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385c:	d108      	bne.n	8003870 <HAL_UART_Transmit+0x6c>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d104      	bne.n	8003870 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e003      	b.n	8003878 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003878:	e02e      	b.n	80038d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fb1f 	bl	8003ec8 <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e03a      	b.n	8003912 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3302      	adds	r3, #2
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	e007      	b.n	80038ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	3301      	adds	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1cb      	bne.n	800387a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2140      	movs	r1, #64	; 0x40
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 faeb 	bl	8003ec8 <UART_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e006      	b.n	8003912 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	4613      	mov	r3, r2
 8003926:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b20      	cmp	r3, #32
 8003932:	d112      	bne.n	800395a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_UART_Receive_IT+0x26>
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e00b      	b.n	800395c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	461a      	mov	r2, r3
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fb12 	bl	8003f7a <UART_Start_Receive_IT>
 8003956:	4603      	mov	r3, r0
 8003958:	e000      	b.n	800395c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0ba      	sub	sp, #232	; 0xe8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_UART_IRQHandler+0x66>
 80039b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fbf2 	bl	80041ac <UART_Receive_IT>
      return;
 80039c8:	e25b      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80de 	beq.w	8003b90 <HAL_UART_IRQHandler+0x22c>
 80039d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80d1 	beq.w	8003b90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_UART_IRQHandler+0xae>
 80039fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_UART_IRQHandler+0xd2>
 8003a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f043 0202 	orr.w	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_UART_IRQHandler+0xf6>
 8003a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f043 0204 	orr.w	r2, r3, #4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d011      	beq.n	8003a8a <HAL_UART_IRQHandler+0x126>
 8003a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f043 0208 	orr.w	r2, r3, #8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 81f2 	beq.w	8003e78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x14e>
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fb7d 	bl	80041ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <HAL_UART_IRQHandler+0x17a>
 8003ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d04f      	beq.n	8003b7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa85 	bl	8003fee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d141      	bne.n	8003b76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3314      	adds	r3, #20
 8003b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1d9      	bne.n	8003af2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d013      	beq.n	8003b6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	4a7e      	ldr	r2, [pc, #504]	; (8003d44 <HAL_UART_IRQHandler+0x3e0>)
 8003b4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe f800 	bl	8001b58 <HAL_DMA_Abort_IT>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	e00e      	b.n	8003b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f994 	bl	8003e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	e00a      	b.n	8003b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f990 	bl	8003e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e006      	b.n	8003b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f98c 	bl	8003e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b8a:	e175      	b.n	8003e78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	bf00      	nop
    return;
 8003b8e:	e173      	b.n	8003e78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	f040 814f 	bne.w	8003e38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8148 	beq.w	8003e38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8141 	beq.w	8003e38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	f040 80b6 	bne.w	8003d48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8145 	beq.w	8003e7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	f080 813e 	bcs.w	8003e7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c12:	f000 8088 	beq.w	8003d26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1d9      	bne.n	8003c16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3314      	adds	r3, #20
 8003c68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e1      	bne.n	8003c62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e3      	bne.n	8003c9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf6:	f023 0310 	bic.w	r3, r3, #16
 8003cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d08:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e3      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd fea9 	bl	8001a78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f8b7 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d42:	e09b      	b.n	8003e7c <HAL_UART_IRQHandler+0x518>
 8003d44:	080040b5 	.word	0x080040b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 808e 	beq.w	8003e80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8089 	beq.w	8003e80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d92:	647a      	str	r2, [r7, #68]	; 0x44
 8003d94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e3      	bne.n	8003d6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3314      	adds	r3, #20
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	623b      	str	r3, [r7, #32]
   return(result);
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dca:	633a      	str	r2, [r7, #48]	; 0x30
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e3      	bne.n	8003da6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0310 	bic.w	r3, r3, #16
 8003e02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e10:	61fa      	str	r2, [r7, #28]
 8003e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e3      	bne.n	8003dec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f83d 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e36:	e023      	b.n	8003e80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <HAL_UART_IRQHandler+0x4f4>
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f943 	bl	80040dc <UART_Transmit_IT>
    return;
 8003e56:	e014      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <HAL_UART_IRQHandler+0x51e>
 8003e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f983 	bl	800417c <UART_EndTransmit_IT>
    return;
 8003e76:	e004      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e78:	bf00      	nop
 8003e7a:	e002      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e80:	bf00      	nop
  }
}
 8003e82:	37e8      	adds	r7, #232	; 0xe8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed8:	e03b      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d037      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee2:	f7fd f967 	bl	80011b4 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	6a3a      	ldr	r2, [r7, #32]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e03a      	b.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d023      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b80      	cmp	r3, #128	; 0x80
 8003f0e:	d020      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d01d      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d116      	bne.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f857 	bl	8003fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2208      	movs	r2, #8
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e00f      	b.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d0b4      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	4613      	mov	r3, r2
 8003f86:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	88fa      	ldrh	r2, [r7, #6]
 8003f92:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2222      	movs	r2, #34	; 0x22
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0220 	orr.w	r2, r2, #32
 8003fde:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b095      	sub	sp, #84	; 0x54
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800400c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004016:	643a      	str	r2, [r7, #64]	; 0x40
 8004018:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800401c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e5      	bne.n	8003ff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3314      	adds	r3, #20
 8004030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	61fb      	str	r3, [r7, #28]
   return(result);
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	64bb      	str	r3, [r7, #72]	; 0x48
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e5      	bne.n	800402a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	2b01      	cmp	r3, #1
 8004064:	d119      	bne.n	800409a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	60bb      	str	r3, [r7, #8]
   return(result);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f023 0310 	bic.w	r3, r3, #16
 800407c:	647b      	str	r3, [r7, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004086:	61ba      	str	r2, [r7, #24]
 8004088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6979      	ldr	r1, [r7, #20]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	613b      	str	r3, [r7, #16]
   return(result);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e5      	bne.n	8004066 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040a8:	bf00      	nop
 80040aa:	3754      	adds	r7, #84	; 0x54
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff fee4 	bl	8003e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b21      	cmp	r3, #33	; 0x21
 80040ee:	d13e      	bne.n	800416e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f8:	d114      	bne.n	8004124 <UART_Transmit_IT+0x48>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d110      	bne.n	8004124 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004116:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	1c9a      	adds	r2, r3, #2
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	621a      	str	r2, [r3, #32]
 8004122:	e008      	b.n	8004136 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	1c59      	adds	r1, r3, #1
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6211      	str	r1, [r2, #32]
 800412e:	781a      	ldrb	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29b      	uxth	r3, r3
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4619      	mov	r1, r3
 8004144:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004158:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004168:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004192:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fe73 	bl	8003e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b22      	cmp	r3, #34	; 0x22
 80041be:	f040 80ae 	bne.w	800431e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ca:	d117      	bne.n	80041fc <UART_Receive_IT+0x50>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d113      	bne.n	80041fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	1c9a      	adds	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
 80041fa:	e026      	b.n	800424a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420e:	d007      	beq.n	8004220 <UART_Receive_IT+0x74>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <UART_Receive_IT+0x82>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	e008      	b.n	8004240 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800423a:	b2da      	uxtb	r2, r3
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4619      	mov	r1, r3
 8004258:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800425a:	2b00      	cmp	r3, #0
 800425c:	d15d      	bne.n	800431a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0220 	bic.w	r2, r2, #32
 800426c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d135      	bne.n	8004310 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f023 0310 	bic.w	r3, r3, #16
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ca:	623a      	str	r2, [r7, #32]
 80042cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	69f9      	ldr	r1, [r7, #28]
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e5      	bne.n	80042aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	d10a      	bne.n	8004302 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fdd1 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
 800430e:	e002      	b.n	8004316 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fc fe77 	bl	8001004 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e002      	b.n	8004320 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	e000      	b.n	8004320 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800431e:	2302      	movs	r3, #2
  }
}
 8004320:	4618      	mov	r0, r3
 8004322:	3730      	adds	r7, #48	; 0x30
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800432c:	b0c0      	sub	sp, #256	; 0x100
 800432e:	af00      	add	r7, sp, #0
 8004330:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	68d9      	ldr	r1, [r3, #12]
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	ea40 0301 	orr.w	r3, r0, r1
 8004350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	431a      	orrs	r2, r3
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	431a      	orrs	r2, r3
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004380:	f021 010c 	bic.w	r1, r1, #12
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800438e:	430b      	orrs	r3, r1
 8004390:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a2:	6999      	ldr	r1, [r3, #24]
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	ea40 0301 	orr.w	r3, r0, r1
 80043ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b8f      	ldr	r3, [pc, #572]	; (80045f4 <UART_SetConfig+0x2cc>)
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d005      	beq.n	80043c8 <UART_SetConfig+0xa0>
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4b8d      	ldr	r3, [pc, #564]	; (80045f8 <UART_SetConfig+0x2d0>)
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d104      	bne.n	80043d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043c8:	f7ff f9b8 	bl	800373c <HAL_RCC_GetPCLK2Freq>
 80043cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043d0:	e003      	b.n	80043da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043d2:	f7ff f99f 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 80043d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e4:	f040 810c 	bne.w	8004600 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043fa:	4622      	mov	r2, r4
 80043fc:	462b      	mov	r3, r5
 80043fe:	1891      	adds	r1, r2, r2
 8004400:	65b9      	str	r1, [r7, #88]	; 0x58
 8004402:	415b      	adcs	r3, r3
 8004404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800440a:	4621      	mov	r1, r4
 800440c:	eb12 0801 	adds.w	r8, r2, r1
 8004410:	4629      	mov	r1, r5
 8004412:	eb43 0901 	adc.w	r9, r3, r1
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800442a:	4690      	mov	r8, r2
 800442c:	4699      	mov	r9, r3
 800442e:	4623      	mov	r3, r4
 8004430:	eb18 0303 	adds.w	r3, r8, r3
 8004434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004438:	462b      	mov	r3, r5
 800443a:	eb49 0303 	adc.w	r3, r9, r3
 800443e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800444e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004456:	460b      	mov	r3, r1
 8004458:	18db      	adds	r3, r3, r3
 800445a:	653b      	str	r3, [r7, #80]	; 0x50
 800445c:	4613      	mov	r3, r2
 800445e:	eb42 0303 	adc.w	r3, r2, r3
 8004462:	657b      	str	r3, [r7, #84]	; 0x54
 8004464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004468:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800446c:	f7fb ff08 	bl	8000280 <__aeabi_uldivmod>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4b61      	ldr	r3, [pc, #388]	; (80045fc <UART_SetConfig+0x2d4>)
 8004476:	fba3 2302 	umull	r2, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	011c      	lsls	r4, r3, #4
 800447e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004488:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800448c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004490:	4642      	mov	r2, r8
 8004492:	464b      	mov	r3, r9
 8004494:	1891      	adds	r1, r2, r2
 8004496:	64b9      	str	r1, [r7, #72]	; 0x48
 8004498:	415b      	adcs	r3, r3
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044a0:	4641      	mov	r1, r8
 80044a2:	eb12 0a01 	adds.w	sl, r2, r1
 80044a6:	4649      	mov	r1, r9
 80044a8:	eb43 0b01 	adc.w	fp, r3, r1
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044c0:	4692      	mov	sl, r2
 80044c2:	469b      	mov	fp, r3
 80044c4:	4643      	mov	r3, r8
 80044c6:	eb1a 0303 	adds.w	r3, sl, r3
 80044ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044ce:	464b      	mov	r3, r9
 80044d0:	eb4b 0303 	adc.w	r3, fp, r3
 80044d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044ec:	460b      	mov	r3, r1
 80044ee:	18db      	adds	r3, r3, r3
 80044f0:	643b      	str	r3, [r7, #64]	; 0x40
 80044f2:	4613      	mov	r3, r2
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	647b      	str	r3, [r7, #68]	; 0x44
 80044fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004502:	f7fb febd 	bl	8000280 <__aeabi_uldivmod>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4611      	mov	r1, r2
 800450c:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <UART_SetConfig+0x2d4>)
 800450e:	fba3 2301 	umull	r2, r3, r3, r1
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	2264      	movs	r2, #100	; 0x64
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	1acb      	subs	r3, r1, r3
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004522:	4b36      	ldr	r3, [pc, #216]	; (80045fc <UART_SetConfig+0x2d4>)
 8004524:	fba3 2302 	umull	r2, r3, r3, r2
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004530:	441c      	add	r4, r3
 8004532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004536:	2200      	movs	r2, #0
 8004538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800453c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004540:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004544:	4642      	mov	r2, r8
 8004546:	464b      	mov	r3, r9
 8004548:	1891      	adds	r1, r2, r2
 800454a:	63b9      	str	r1, [r7, #56]	; 0x38
 800454c:	415b      	adcs	r3, r3
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004550:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004554:	4641      	mov	r1, r8
 8004556:	1851      	adds	r1, r2, r1
 8004558:	6339      	str	r1, [r7, #48]	; 0x30
 800455a:	4649      	mov	r1, r9
 800455c:	414b      	adcs	r3, r1
 800455e:	637b      	str	r3, [r7, #52]	; 0x34
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800456c:	4659      	mov	r1, fp
 800456e:	00cb      	lsls	r3, r1, #3
 8004570:	4651      	mov	r1, sl
 8004572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004576:	4651      	mov	r1, sl
 8004578:	00ca      	lsls	r2, r1, #3
 800457a:	4610      	mov	r0, r2
 800457c:	4619      	mov	r1, r3
 800457e:	4603      	mov	r3, r0
 8004580:	4642      	mov	r2, r8
 8004582:	189b      	adds	r3, r3, r2
 8004584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004588:	464b      	mov	r3, r9
 800458a:	460a      	mov	r2, r1
 800458c:	eb42 0303 	adc.w	r3, r2, r3
 8004590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045a8:	460b      	mov	r3, r1
 80045aa:	18db      	adds	r3, r3, r3
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ae:	4613      	mov	r3, r2
 80045b0:	eb42 0303 	adc.w	r3, r2, r3
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045be:	f7fb fe5f 	bl	8000280 <__aeabi_uldivmod>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <UART_SetConfig+0x2d4>)
 80045c8:	fba3 1302 	umull	r1, r3, r3, r2
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	2164      	movs	r1, #100	; 0x64
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	3332      	adds	r3, #50	; 0x32
 80045da:	4a08      	ldr	r2, [pc, #32]	; (80045fc <UART_SetConfig+0x2d4>)
 80045dc:	fba2 2303 	umull	r2, r3, r2, r3
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	f003 0207 	and.w	r2, r3, #7
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4422      	add	r2, r4
 80045ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045f0:	e106      	b.n	8004800 <UART_SetConfig+0x4d8>
 80045f2:	bf00      	nop
 80045f4:	40011000 	.word	0x40011000
 80045f8:	40011400 	.word	0x40011400
 80045fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004604:	2200      	movs	r2, #0
 8004606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800460a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800460e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004612:	4642      	mov	r2, r8
 8004614:	464b      	mov	r3, r9
 8004616:	1891      	adds	r1, r2, r2
 8004618:	6239      	str	r1, [r7, #32]
 800461a:	415b      	adcs	r3, r3
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
 800461e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004622:	4641      	mov	r1, r8
 8004624:	1854      	adds	r4, r2, r1
 8004626:	4649      	mov	r1, r9
 8004628:	eb43 0501 	adc.w	r5, r3, r1
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	00eb      	lsls	r3, r5, #3
 8004636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463a:	00e2      	lsls	r2, r4, #3
 800463c:	4614      	mov	r4, r2
 800463e:	461d      	mov	r5, r3
 8004640:	4643      	mov	r3, r8
 8004642:	18e3      	adds	r3, r4, r3
 8004644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004648:	464b      	mov	r3, r9
 800464a:	eb45 0303 	adc.w	r3, r5, r3
 800464e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800465e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800466e:	4629      	mov	r1, r5
 8004670:	008b      	lsls	r3, r1, #2
 8004672:	4621      	mov	r1, r4
 8004674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004678:	4621      	mov	r1, r4
 800467a:	008a      	lsls	r2, r1, #2
 800467c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004680:	f7fb fdfe 	bl	8000280 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4b60      	ldr	r3, [pc, #384]	; (800480c <UART_SetConfig+0x4e4>)
 800468a:	fba3 2302 	umull	r2, r3, r3, r2
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	011c      	lsls	r4, r3, #4
 8004692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004696:	2200      	movs	r2, #0
 8004698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800469c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046a4:	4642      	mov	r2, r8
 80046a6:	464b      	mov	r3, r9
 80046a8:	1891      	adds	r1, r2, r2
 80046aa:	61b9      	str	r1, [r7, #24]
 80046ac:	415b      	adcs	r3, r3
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b4:	4641      	mov	r1, r8
 80046b6:	1851      	adds	r1, r2, r1
 80046b8:	6139      	str	r1, [r7, #16]
 80046ba:	4649      	mov	r1, r9
 80046bc:	414b      	adcs	r3, r1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046cc:	4659      	mov	r1, fp
 80046ce:	00cb      	lsls	r3, r1, #3
 80046d0:	4651      	mov	r1, sl
 80046d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046d6:	4651      	mov	r1, sl
 80046d8:	00ca      	lsls	r2, r1, #3
 80046da:	4610      	mov	r0, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	4642      	mov	r2, r8
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046e8:	464b      	mov	r3, r9
 80046ea:	460a      	mov	r2, r1
 80046ec:	eb42 0303 	adc.w	r3, r2, r3
 80046f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80046fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800470c:	4649      	mov	r1, r9
 800470e:	008b      	lsls	r3, r1, #2
 8004710:	4641      	mov	r1, r8
 8004712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004716:	4641      	mov	r1, r8
 8004718:	008a      	lsls	r2, r1, #2
 800471a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800471e:	f7fb fdaf 	bl	8000280 <__aeabi_uldivmod>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4611      	mov	r1, r2
 8004728:	4b38      	ldr	r3, [pc, #224]	; (800480c <UART_SetConfig+0x4e4>)
 800472a:	fba3 2301 	umull	r2, r3, r3, r1
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2264      	movs	r2, #100	; 0x64
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	1acb      	subs	r3, r1, r3
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	3332      	adds	r3, #50	; 0x32
 800473c:	4a33      	ldr	r2, [pc, #204]	; (800480c <UART_SetConfig+0x4e4>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004748:	441c      	add	r4, r3
 800474a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474e:	2200      	movs	r2, #0
 8004750:	673b      	str	r3, [r7, #112]	; 0x70
 8004752:	677a      	str	r2, [r7, #116]	; 0x74
 8004754:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	1891      	adds	r1, r2, r2
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	415b      	adcs	r3, r3
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004768:	4641      	mov	r1, r8
 800476a:	1851      	adds	r1, r2, r1
 800476c:	6039      	str	r1, [r7, #0]
 800476e:	4649      	mov	r1, r9
 8004770:	414b      	adcs	r3, r1
 8004772:	607b      	str	r3, [r7, #4]
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004780:	4659      	mov	r1, fp
 8004782:	00cb      	lsls	r3, r1, #3
 8004784:	4651      	mov	r1, sl
 8004786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478a:	4651      	mov	r1, sl
 800478c:	00ca      	lsls	r2, r1, #3
 800478e:	4610      	mov	r0, r2
 8004790:	4619      	mov	r1, r3
 8004792:	4603      	mov	r3, r0
 8004794:	4642      	mov	r2, r8
 8004796:	189b      	adds	r3, r3, r2
 8004798:	66bb      	str	r3, [r7, #104]	; 0x68
 800479a:	464b      	mov	r3, r9
 800479c:	460a      	mov	r2, r1
 800479e:	eb42 0303 	adc.w	r3, r2, r3
 80047a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	663b      	str	r3, [r7, #96]	; 0x60
 80047ae:	667a      	str	r2, [r7, #100]	; 0x64
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047bc:	4649      	mov	r1, r9
 80047be:	008b      	lsls	r3, r1, #2
 80047c0:	4641      	mov	r1, r8
 80047c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c6:	4641      	mov	r1, r8
 80047c8:	008a      	lsls	r2, r1, #2
 80047ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047ce:	f7fb fd57 	bl	8000280 <__aeabi_uldivmod>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4b0d      	ldr	r3, [pc, #52]	; (800480c <UART_SetConfig+0x4e4>)
 80047d8:	fba3 1302 	umull	r1, r3, r3, r2
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	2164      	movs	r1, #100	; 0x64
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	3332      	adds	r3, #50	; 0x32
 80047ea:	4a08      	ldr	r2, [pc, #32]	; (800480c <UART_SetConfig+0x4e4>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	f003 020f 	and.w	r2, r3, #15
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4422      	add	r2, r4
 80047fe:	609a      	str	r2, [r3, #8]
}
 8004800:	bf00      	nop
 8004802:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004806:	46bd      	mov	sp, r7
 8004808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800480c:	51eb851f 	.word	0x51eb851f

08004810 <std>:
 8004810:	2300      	movs	r3, #0
 8004812:	b510      	push	{r4, lr}
 8004814:	4604      	mov	r4, r0
 8004816:	e9c0 3300 	strd	r3, r3, [r0]
 800481a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800481e:	6083      	str	r3, [r0, #8]
 8004820:	8181      	strh	r1, [r0, #12]
 8004822:	6643      	str	r3, [r0, #100]	; 0x64
 8004824:	81c2      	strh	r2, [r0, #14]
 8004826:	6183      	str	r3, [r0, #24]
 8004828:	4619      	mov	r1, r3
 800482a:	2208      	movs	r2, #8
 800482c:	305c      	adds	r0, #92	; 0x5c
 800482e:	f000 f9f7 	bl	8004c20 <memset>
 8004832:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <std+0x58>)
 8004834:	6263      	str	r3, [r4, #36]	; 0x24
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <std+0x5c>)
 8004838:	62a3      	str	r3, [r4, #40]	; 0x28
 800483a:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <std+0x60>)
 800483c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <std+0x64>)
 8004840:	6323      	str	r3, [r4, #48]	; 0x30
 8004842:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <std+0x68>)
 8004844:	6224      	str	r4, [r4, #32]
 8004846:	429c      	cmp	r4, r3
 8004848:	d006      	beq.n	8004858 <std+0x48>
 800484a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800484e:	4294      	cmp	r4, r2
 8004850:	d002      	beq.n	8004858 <std+0x48>
 8004852:	33d0      	adds	r3, #208	; 0xd0
 8004854:	429c      	cmp	r4, r3
 8004856:	d105      	bne.n	8004864 <std+0x54>
 8004858:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800485c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004860:	f000 ba56 	b.w	8004d10 <__retarget_lock_init_recursive>
 8004864:	bd10      	pop	{r4, pc}
 8004866:	bf00      	nop
 8004868:	08004a71 	.word	0x08004a71
 800486c:	08004a93 	.word	0x08004a93
 8004870:	08004acb 	.word	0x08004acb
 8004874:	08004aef 	.word	0x08004aef
 8004878:	200002d8 	.word	0x200002d8

0800487c <stdio_exit_handler>:
 800487c:	4a02      	ldr	r2, [pc, #8]	; (8004888 <stdio_exit_handler+0xc>)
 800487e:	4903      	ldr	r1, [pc, #12]	; (800488c <stdio_exit_handler+0x10>)
 8004880:	4803      	ldr	r0, [pc, #12]	; (8004890 <stdio_exit_handler+0x14>)
 8004882:	f000 b869 	b.w	8004958 <_fwalk_sglue>
 8004886:	bf00      	nop
 8004888:	2000000c 	.word	0x2000000c
 800488c:	080055bd 	.word	0x080055bd
 8004890:	20000018 	.word	0x20000018

08004894 <cleanup_stdio>:
 8004894:	6841      	ldr	r1, [r0, #4]
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <cleanup_stdio+0x34>)
 8004898:	4299      	cmp	r1, r3
 800489a:	b510      	push	{r4, lr}
 800489c:	4604      	mov	r4, r0
 800489e:	d001      	beq.n	80048a4 <cleanup_stdio+0x10>
 80048a0:	f000 fe8c 	bl	80055bc <_fflush_r>
 80048a4:	68a1      	ldr	r1, [r4, #8]
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <cleanup_stdio+0x38>)
 80048a8:	4299      	cmp	r1, r3
 80048aa:	d002      	beq.n	80048b2 <cleanup_stdio+0x1e>
 80048ac:	4620      	mov	r0, r4
 80048ae:	f000 fe85 	bl	80055bc <_fflush_r>
 80048b2:	68e1      	ldr	r1, [r4, #12]
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <cleanup_stdio+0x3c>)
 80048b6:	4299      	cmp	r1, r3
 80048b8:	d004      	beq.n	80048c4 <cleanup_stdio+0x30>
 80048ba:	4620      	mov	r0, r4
 80048bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c0:	f000 be7c 	b.w	80055bc <_fflush_r>
 80048c4:	bd10      	pop	{r4, pc}
 80048c6:	bf00      	nop
 80048c8:	200002d8 	.word	0x200002d8
 80048cc:	20000340 	.word	0x20000340
 80048d0:	200003a8 	.word	0x200003a8

080048d4 <global_stdio_init.part.0>:
 80048d4:	b510      	push	{r4, lr}
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <global_stdio_init.part.0+0x30>)
 80048d8:	4c0b      	ldr	r4, [pc, #44]	; (8004908 <global_stdio_init.part.0+0x34>)
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <global_stdio_init.part.0+0x38>)
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	4620      	mov	r0, r4
 80048e0:	2200      	movs	r2, #0
 80048e2:	2104      	movs	r1, #4
 80048e4:	f7ff ff94 	bl	8004810 <std>
 80048e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80048ec:	2201      	movs	r2, #1
 80048ee:	2109      	movs	r1, #9
 80048f0:	f7ff ff8e 	bl	8004810 <std>
 80048f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80048f8:	2202      	movs	r2, #2
 80048fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048fe:	2112      	movs	r1, #18
 8004900:	f7ff bf86 	b.w	8004810 <std>
 8004904:	20000410 	.word	0x20000410
 8004908:	200002d8 	.word	0x200002d8
 800490c:	0800487d 	.word	0x0800487d

08004910 <__sfp_lock_acquire>:
 8004910:	4801      	ldr	r0, [pc, #4]	; (8004918 <__sfp_lock_acquire+0x8>)
 8004912:	f000 b9fe 	b.w	8004d12 <__retarget_lock_acquire_recursive>
 8004916:	bf00      	nop
 8004918:	20000419 	.word	0x20000419

0800491c <__sfp_lock_release>:
 800491c:	4801      	ldr	r0, [pc, #4]	; (8004924 <__sfp_lock_release+0x8>)
 800491e:	f000 b9f9 	b.w	8004d14 <__retarget_lock_release_recursive>
 8004922:	bf00      	nop
 8004924:	20000419 	.word	0x20000419

08004928 <__sinit>:
 8004928:	b510      	push	{r4, lr}
 800492a:	4604      	mov	r4, r0
 800492c:	f7ff fff0 	bl	8004910 <__sfp_lock_acquire>
 8004930:	6a23      	ldr	r3, [r4, #32]
 8004932:	b11b      	cbz	r3, 800493c <__sinit+0x14>
 8004934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004938:	f7ff bff0 	b.w	800491c <__sfp_lock_release>
 800493c:	4b04      	ldr	r3, [pc, #16]	; (8004950 <__sinit+0x28>)
 800493e:	6223      	str	r3, [r4, #32]
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <__sinit+0x2c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f5      	bne.n	8004934 <__sinit+0xc>
 8004948:	f7ff ffc4 	bl	80048d4 <global_stdio_init.part.0>
 800494c:	e7f2      	b.n	8004934 <__sinit+0xc>
 800494e:	bf00      	nop
 8004950:	08004895 	.word	0x08004895
 8004954:	20000410 	.word	0x20000410

08004958 <_fwalk_sglue>:
 8004958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800495c:	4607      	mov	r7, r0
 800495e:	4688      	mov	r8, r1
 8004960:	4614      	mov	r4, r2
 8004962:	2600      	movs	r6, #0
 8004964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004968:	f1b9 0901 	subs.w	r9, r9, #1
 800496c:	d505      	bpl.n	800497a <_fwalk_sglue+0x22>
 800496e:	6824      	ldr	r4, [r4, #0]
 8004970:	2c00      	cmp	r4, #0
 8004972:	d1f7      	bne.n	8004964 <_fwalk_sglue+0xc>
 8004974:	4630      	mov	r0, r6
 8004976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800497a:	89ab      	ldrh	r3, [r5, #12]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d907      	bls.n	8004990 <_fwalk_sglue+0x38>
 8004980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004984:	3301      	adds	r3, #1
 8004986:	d003      	beq.n	8004990 <_fwalk_sglue+0x38>
 8004988:	4629      	mov	r1, r5
 800498a:	4638      	mov	r0, r7
 800498c:	47c0      	blx	r8
 800498e:	4306      	orrs	r6, r0
 8004990:	3568      	adds	r5, #104	; 0x68
 8004992:	e7e9      	b.n	8004968 <_fwalk_sglue+0x10>

08004994 <iprintf>:
 8004994:	b40f      	push	{r0, r1, r2, r3}
 8004996:	b507      	push	{r0, r1, r2, lr}
 8004998:	4906      	ldr	r1, [pc, #24]	; (80049b4 <iprintf+0x20>)
 800499a:	ab04      	add	r3, sp, #16
 800499c:	6808      	ldr	r0, [r1, #0]
 800499e:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a2:	6881      	ldr	r1, [r0, #8]
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	f000 fad9 	bl	8004f5c <_vfiprintf_r>
 80049aa:	b003      	add	sp, #12
 80049ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80049b0:	b004      	add	sp, #16
 80049b2:	4770      	bx	lr
 80049b4:	20000064 	.word	0x20000064

080049b8 <_puts_r>:
 80049b8:	6a03      	ldr	r3, [r0, #32]
 80049ba:	b570      	push	{r4, r5, r6, lr}
 80049bc:	6884      	ldr	r4, [r0, #8]
 80049be:	4605      	mov	r5, r0
 80049c0:	460e      	mov	r6, r1
 80049c2:	b90b      	cbnz	r3, 80049c8 <_puts_r+0x10>
 80049c4:	f7ff ffb0 	bl	8004928 <__sinit>
 80049c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049ca:	07db      	lsls	r3, r3, #31
 80049cc:	d405      	bmi.n	80049da <_puts_r+0x22>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	0598      	lsls	r0, r3, #22
 80049d2:	d402      	bmi.n	80049da <_puts_r+0x22>
 80049d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d6:	f000 f99c 	bl	8004d12 <__retarget_lock_acquire_recursive>
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	0719      	lsls	r1, r3, #28
 80049de:	d513      	bpl.n	8004a08 <_puts_r+0x50>
 80049e0:	6923      	ldr	r3, [r4, #16]
 80049e2:	b18b      	cbz	r3, 8004a08 <_puts_r+0x50>
 80049e4:	3e01      	subs	r6, #1
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049ec:	3b01      	subs	r3, #1
 80049ee:	60a3      	str	r3, [r4, #8]
 80049f0:	b9e9      	cbnz	r1, 8004a2e <_puts_r+0x76>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	da2e      	bge.n	8004a54 <_puts_r+0x9c>
 80049f6:	4622      	mov	r2, r4
 80049f8:	210a      	movs	r1, #10
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 f87b 	bl	8004af6 <__swbuf_r>
 8004a00:	3001      	adds	r0, #1
 8004a02:	d007      	beq.n	8004a14 <_puts_r+0x5c>
 8004a04:	250a      	movs	r5, #10
 8004a06:	e007      	b.n	8004a18 <_puts_r+0x60>
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f000 f8b0 	bl	8004b70 <__swsetup_r>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d0e7      	beq.n	80049e4 <_puts_r+0x2c>
 8004a14:	f04f 35ff 	mov.w	r5, #4294967295
 8004a18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a1a:	07da      	lsls	r2, r3, #31
 8004a1c:	d405      	bmi.n	8004a2a <_puts_r+0x72>
 8004a1e:	89a3      	ldrh	r3, [r4, #12]
 8004a20:	059b      	lsls	r3, r3, #22
 8004a22:	d402      	bmi.n	8004a2a <_puts_r+0x72>
 8004a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a26:	f000 f975 	bl	8004d14 <__retarget_lock_release_recursive>
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	bd70      	pop	{r4, r5, r6, pc}
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	da04      	bge.n	8004a3c <_puts_r+0x84>
 8004a32:	69a2      	ldr	r2, [r4, #24]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	dc06      	bgt.n	8004a46 <_puts_r+0x8e>
 8004a38:	290a      	cmp	r1, #10
 8004a3a:	d004      	beq.n	8004a46 <_puts_r+0x8e>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	6022      	str	r2, [r4, #0]
 8004a42:	7019      	strb	r1, [r3, #0]
 8004a44:	e7cf      	b.n	80049e6 <_puts_r+0x2e>
 8004a46:	4622      	mov	r2, r4
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f000 f854 	bl	8004af6 <__swbuf_r>
 8004a4e:	3001      	adds	r0, #1
 8004a50:	d1c9      	bne.n	80049e6 <_puts_r+0x2e>
 8004a52:	e7df      	b.n	8004a14 <_puts_r+0x5c>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	250a      	movs	r5, #10
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	6022      	str	r2, [r4, #0]
 8004a5c:	701d      	strb	r5, [r3, #0]
 8004a5e:	e7db      	b.n	8004a18 <_puts_r+0x60>

08004a60 <puts>:
 8004a60:	4b02      	ldr	r3, [pc, #8]	; (8004a6c <puts+0xc>)
 8004a62:	4601      	mov	r1, r0
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	f7ff bfa7 	b.w	80049b8 <_puts_r>
 8004a6a:	bf00      	nop
 8004a6c:	20000064 	.word	0x20000064

08004a70 <__sread>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	460c      	mov	r4, r1
 8004a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a78:	f000 f8fc 	bl	8004c74 <_read_r>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	bfab      	itete	ge
 8004a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a82:	89a3      	ldrhlt	r3, [r4, #12]
 8004a84:	181b      	addge	r3, r3, r0
 8004a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a8a:	bfac      	ite	ge
 8004a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a8e:	81a3      	strhlt	r3, [r4, #12]
 8004a90:	bd10      	pop	{r4, pc}

08004a92 <__swrite>:
 8004a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a96:	461f      	mov	r7, r3
 8004a98:	898b      	ldrh	r3, [r1, #12]
 8004a9a:	05db      	lsls	r3, r3, #23
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	4616      	mov	r6, r2
 8004aa2:	d505      	bpl.n	8004ab0 <__swrite+0x1e>
 8004aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f000 f8d0 	bl	8004c50 <_lseek_r>
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	4632      	mov	r2, r6
 8004abe:	463b      	mov	r3, r7
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac6:	f000 b8e7 	b.w	8004c98 <_write_r>

08004aca <__sseek>:
 8004aca:	b510      	push	{r4, lr}
 8004acc:	460c      	mov	r4, r1
 8004ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad2:	f000 f8bd 	bl	8004c50 <_lseek_r>
 8004ad6:	1c43      	adds	r3, r0, #1
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	bf15      	itete	ne
 8004adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ae6:	81a3      	strheq	r3, [r4, #12]
 8004ae8:	bf18      	it	ne
 8004aea:	81a3      	strhne	r3, [r4, #12]
 8004aec:	bd10      	pop	{r4, pc}

08004aee <__sclose>:
 8004aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af2:	f000 b89d 	b.w	8004c30 <_close_r>

08004af6 <__swbuf_r>:
 8004af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af8:	460e      	mov	r6, r1
 8004afa:	4614      	mov	r4, r2
 8004afc:	4605      	mov	r5, r0
 8004afe:	b118      	cbz	r0, 8004b08 <__swbuf_r+0x12>
 8004b00:	6a03      	ldr	r3, [r0, #32]
 8004b02:	b90b      	cbnz	r3, 8004b08 <__swbuf_r+0x12>
 8004b04:	f7ff ff10 	bl	8004928 <__sinit>
 8004b08:	69a3      	ldr	r3, [r4, #24]
 8004b0a:	60a3      	str	r3, [r4, #8]
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	071a      	lsls	r2, r3, #28
 8004b10:	d525      	bpl.n	8004b5e <__swbuf_r+0x68>
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	b31b      	cbz	r3, 8004b5e <__swbuf_r+0x68>
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	6922      	ldr	r2, [r4, #16]
 8004b1a:	1a98      	subs	r0, r3, r2
 8004b1c:	6963      	ldr	r3, [r4, #20]
 8004b1e:	b2f6      	uxtb	r6, r6
 8004b20:	4283      	cmp	r3, r0
 8004b22:	4637      	mov	r7, r6
 8004b24:	dc04      	bgt.n	8004b30 <__swbuf_r+0x3a>
 8004b26:	4621      	mov	r1, r4
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f000 fd47 	bl	80055bc <_fflush_r>
 8004b2e:	b9e0      	cbnz	r0, 8004b6a <__swbuf_r+0x74>
 8004b30:	68a3      	ldr	r3, [r4, #8]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	60a3      	str	r3, [r4, #8]
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	6022      	str	r2, [r4, #0]
 8004b3c:	701e      	strb	r6, [r3, #0]
 8004b3e:	6962      	ldr	r2, [r4, #20]
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d004      	beq.n	8004b50 <__swbuf_r+0x5a>
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	07db      	lsls	r3, r3, #31
 8004b4a:	d506      	bpl.n	8004b5a <__swbuf_r+0x64>
 8004b4c:	2e0a      	cmp	r6, #10
 8004b4e:	d104      	bne.n	8004b5a <__swbuf_r+0x64>
 8004b50:	4621      	mov	r1, r4
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 fd32 	bl	80055bc <_fflush_r>
 8004b58:	b938      	cbnz	r0, 8004b6a <__swbuf_r+0x74>
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b5e:	4621      	mov	r1, r4
 8004b60:	4628      	mov	r0, r5
 8004b62:	f000 f805 	bl	8004b70 <__swsetup_r>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d0d5      	beq.n	8004b16 <__swbuf_r+0x20>
 8004b6a:	f04f 37ff 	mov.w	r7, #4294967295
 8004b6e:	e7f4      	b.n	8004b5a <__swbuf_r+0x64>

08004b70 <__swsetup_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4b2a      	ldr	r3, [pc, #168]	; (8004c1c <__swsetup_r+0xac>)
 8004b74:	4605      	mov	r5, r0
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	460c      	mov	r4, r1
 8004b7a:	b118      	cbz	r0, 8004b84 <__swsetup_r+0x14>
 8004b7c:	6a03      	ldr	r3, [r0, #32]
 8004b7e:	b90b      	cbnz	r3, 8004b84 <__swsetup_r+0x14>
 8004b80:	f7ff fed2 	bl	8004928 <__sinit>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b8a:	0718      	lsls	r0, r3, #28
 8004b8c:	d422      	bmi.n	8004bd4 <__swsetup_r+0x64>
 8004b8e:	06d9      	lsls	r1, r3, #27
 8004b90:	d407      	bmi.n	8004ba2 <__swsetup_r+0x32>
 8004b92:	2309      	movs	r3, #9
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b9a:	81a3      	strh	r3, [r4, #12]
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	e034      	b.n	8004c0c <__swsetup_r+0x9c>
 8004ba2:	0758      	lsls	r0, r3, #29
 8004ba4:	d512      	bpl.n	8004bcc <__swsetup_r+0x5c>
 8004ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ba8:	b141      	cbz	r1, 8004bbc <__swsetup_r+0x4c>
 8004baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bae:	4299      	cmp	r1, r3
 8004bb0:	d002      	beq.n	8004bb8 <__swsetup_r+0x48>
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f8b0 	bl	8004d18 <_free_r>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6363      	str	r3, [r4, #52]	; 0x34
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bc2:	81a3      	strh	r3, [r4, #12]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	6923      	ldr	r3, [r4, #16]
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	f043 0308 	orr.w	r3, r3, #8
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	6923      	ldr	r3, [r4, #16]
 8004bd6:	b94b      	cbnz	r3, 8004bec <__swsetup_r+0x7c>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be2:	d003      	beq.n	8004bec <__swsetup_r+0x7c>
 8004be4:	4621      	mov	r1, r4
 8004be6:	4628      	mov	r0, r5
 8004be8:	f000 fd36 	bl	8005658 <__smakebuf_r>
 8004bec:	89a0      	ldrh	r0, [r4, #12]
 8004bee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bf2:	f010 0301 	ands.w	r3, r0, #1
 8004bf6:	d00a      	beq.n	8004c0e <__swsetup_r+0x9e>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60a3      	str	r3, [r4, #8]
 8004bfc:	6963      	ldr	r3, [r4, #20]
 8004bfe:	425b      	negs	r3, r3
 8004c00:	61a3      	str	r3, [r4, #24]
 8004c02:	6923      	ldr	r3, [r4, #16]
 8004c04:	b943      	cbnz	r3, 8004c18 <__swsetup_r+0xa8>
 8004c06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c0a:	d1c4      	bne.n	8004b96 <__swsetup_r+0x26>
 8004c0c:	bd38      	pop	{r3, r4, r5, pc}
 8004c0e:	0781      	lsls	r1, r0, #30
 8004c10:	bf58      	it	pl
 8004c12:	6963      	ldrpl	r3, [r4, #20]
 8004c14:	60a3      	str	r3, [r4, #8]
 8004c16:	e7f4      	b.n	8004c02 <__swsetup_r+0x92>
 8004c18:	2000      	movs	r0, #0
 8004c1a:	e7f7      	b.n	8004c0c <__swsetup_r+0x9c>
 8004c1c:	20000064 	.word	0x20000064

08004c20 <memset>:
 8004c20:	4402      	add	r2, r0
 8004c22:	4603      	mov	r3, r0
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d100      	bne.n	8004c2a <memset+0xa>
 8004c28:	4770      	bx	lr
 8004c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2e:	e7f9      	b.n	8004c24 <memset+0x4>

08004c30 <_close_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d06      	ldr	r5, [pc, #24]	; (8004c4c <_close_r+0x1c>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	f7fc f94f 	bl	8000ede <_close>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_close_r+0x1a>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_close_r+0x1a>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	20000414 	.word	0x20000414

08004c50 <_lseek_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4d07      	ldr	r5, [pc, #28]	; (8004c70 <_lseek_r+0x20>)
 8004c54:	4604      	mov	r4, r0
 8004c56:	4608      	mov	r0, r1
 8004c58:	4611      	mov	r1, r2
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	602a      	str	r2, [r5, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f7fc f964 	bl	8000f2c <_lseek>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_lseek_r+0x1e>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_lseek_r+0x1e>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	20000414 	.word	0x20000414

08004c74 <_read_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d07      	ldr	r5, [pc, #28]	; (8004c94 <_read_r+0x20>)
 8004c78:	4604      	mov	r4, r0
 8004c7a:	4608      	mov	r0, r1
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	2200      	movs	r2, #0
 8004c80:	602a      	str	r2, [r5, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f7fc f90e 	bl	8000ea4 <_read>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_read_r+0x1e>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_read_r+0x1e>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	20000414 	.word	0x20000414

08004c98 <_write_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d07      	ldr	r5, [pc, #28]	; (8004cb8 <_write_r+0x20>)
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7fc f9de 	bl	8001068 <_write>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_write_r+0x1e>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_write_r+0x1e>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	20000414 	.word	0x20000414

08004cbc <__errno>:
 8004cbc:	4b01      	ldr	r3, [pc, #4]	; (8004cc4 <__errno+0x8>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000064 	.word	0x20000064

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	; (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	; (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	; (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	; (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f000 fd2a 	bl	8005734 <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	080057ec 	.word	0x080057ec
 8004d04:	080057ec 	.word	0x080057ec
 8004d08:	080057ec 	.word	0x080057ec
 8004d0c:	080057f0 	.word	0x080057f0

08004d10 <__retarget_lock_init_recursive>:
 8004d10:	4770      	bx	lr

08004d12 <__retarget_lock_acquire_recursive>:
 8004d12:	4770      	bx	lr

08004d14 <__retarget_lock_release_recursive>:
 8004d14:	4770      	bx	lr
	...

08004d18 <_free_r>:
 8004d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d1a:	2900      	cmp	r1, #0
 8004d1c:	d044      	beq.n	8004da8 <_free_r+0x90>
 8004d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d22:	9001      	str	r0, [sp, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f1a1 0404 	sub.w	r4, r1, #4
 8004d2a:	bfb8      	it	lt
 8004d2c:	18e4      	addlt	r4, r4, r3
 8004d2e:	f000 f8df 	bl	8004ef0 <__malloc_lock>
 8004d32:	4a1e      	ldr	r2, [pc, #120]	; (8004dac <_free_r+0x94>)
 8004d34:	9801      	ldr	r0, [sp, #4]
 8004d36:	6813      	ldr	r3, [r2, #0]
 8004d38:	b933      	cbnz	r3, 8004d48 <_free_r+0x30>
 8004d3a:	6063      	str	r3, [r4, #4]
 8004d3c:	6014      	str	r4, [r2, #0]
 8004d3e:	b003      	add	sp, #12
 8004d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d44:	f000 b8da 	b.w	8004efc <__malloc_unlock>
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	d908      	bls.n	8004d5e <_free_r+0x46>
 8004d4c:	6825      	ldr	r5, [r4, #0]
 8004d4e:	1961      	adds	r1, r4, r5
 8004d50:	428b      	cmp	r3, r1
 8004d52:	bf01      	itttt	eq
 8004d54:	6819      	ldreq	r1, [r3, #0]
 8004d56:	685b      	ldreq	r3, [r3, #4]
 8004d58:	1949      	addeq	r1, r1, r5
 8004d5a:	6021      	streq	r1, [r4, #0]
 8004d5c:	e7ed      	b.n	8004d3a <_free_r+0x22>
 8004d5e:	461a      	mov	r2, r3
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	b10b      	cbz	r3, 8004d68 <_free_r+0x50>
 8004d64:	42a3      	cmp	r3, r4
 8004d66:	d9fa      	bls.n	8004d5e <_free_r+0x46>
 8004d68:	6811      	ldr	r1, [r2, #0]
 8004d6a:	1855      	adds	r5, r2, r1
 8004d6c:	42a5      	cmp	r5, r4
 8004d6e:	d10b      	bne.n	8004d88 <_free_r+0x70>
 8004d70:	6824      	ldr	r4, [r4, #0]
 8004d72:	4421      	add	r1, r4
 8004d74:	1854      	adds	r4, r2, r1
 8004d76:	42a3      	cmp	r3, r4
 8004d78:	6011      	str	r1, [r2, #0]
 8004d7a:	d1e0      	bne.n	8004d3e <_free_r+0x26>
 8004d7c:	681c      	ldr	r4, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	6053      	str	r3, [r2, #4]
 8004d82:	440c      	add	r4, r1
 8004d84:	6014      	str	r4, [r2, #0]
 8004d86:	e7da      	b.n	8004d3e <_free_r+0x26>
 8004d88:	d902      	bls.n	8004d90 <_free_r+0x78>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	6003      	str	r3, [r0, #0]
 8004d8e:	e7d6      	b.n	8004d3e <_free_r+0x26>
 8004d90:	6825      	ldr	r5, [r4, #0]
 8004d92:	1961      	adds	r1, r4, r5
 8004d94:	428b      	cmp	r3, r1
 8004d96:	bf04      	itt	eq
 8004d98:	6819      	ldreq	r1, [r3, #0]
 8004d9a:	685b      	ldreq	r3, [r3, #4]
 8004d9c:	6063      	str	r3, [r4, #4]
 8004d9e:	bf04      	itt	eq
 8004da0:	1949      	addeq	r1, r1, r5
 8004da2:	6021      	streq	r1, [r4, #0]
 8004da4:	6054      	str	r4, [r2, #4]
 8004da6:	e7ca      	b.n	8004d3e <_free_r+0x26>
 8004da8:	b003      	add	sp, #12
 8004daa:	bd30      	pop	{r4, r5, pc}
 8004dac:	2000041c 	.word	0x2000041c

08004db0 <sbrk_aligned>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4e0e      	ldr	r6, [pc, #56]	; (8004dec <sbrk_aligned+0x3c>)
 8004db4:	460c      	mov	r4, r1
 8004db6:	6831      	ldr	r1, [r6, #0]
 8004db8:	4605      	mov	r5, r0
 8004dba:	b911      	cbnz	r1, 8004dc2 <sbrk_aligned+0x12>
 8004dbc:	f000 fcaa 	bl	8005714 <_sbrk_r>
 8004dc0:	6030      	str	r0, [r6, #0]
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f000 fca5 	bl	8005714 <_sbrk_r>
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	d00a      	beq.n	8004de4 <sbrk_aligned+0x34>
 8004dce:	1cc4      	adds	r4, r0, #3
 8004dd0:	f024 0403 	bic.w	r4, r4, #3
 8004dd4:	42a0      	cmp	r0, r4
 8004dd6:	d007      	beq.n	8004de8 <sbrk_aligned+0x38>
 8004dd8:	1a21      	subs	r1, r4, r0
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 fc9a 	bl	8005714 <_sbrk_r>
 8004de0:	3001      	adds	r0, #1
 8004de2:	d101      	bne.n	8004de8 <sbrk_aligned+0x38>
 8004de4:	f04f 34ff 	mov.w	r4, #4294967295
 8004de8:	4620      	mov	r0, r4
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	20000420 	.word	0x20000420

08004df0 <_malloc_r>:
 8004df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df4:	1ccd      	adds	r5, r1, #3
 8004df6:	f025 0503 	bic.w	r5, r5, #3
 8004dfa:	3508      	adds	r5, #8
 8004dfc:	2d0c      	cmp	r5, #12
 8004dfe:	bf38      	it	cc
 8004e00:	250c      	movcc	r5, #12
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	4607      	mov	r7, r0
 8004e06:	db01      	blt.n	8004e0c <_malloc_r+0x1c>
 8004e08:	42a9      	cmp	r1, r5
 8004e0a:	d905      	bls.n	8004e18 <_malloc_r+0x28>
 8004e0c:	230c      	movs	r3, #12
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	2600      	movs	r6, #0
 8004e12:	4630      	mov	r0, r6
 8004e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004eec <_malloc_r+0xfc>
 8004e1c:	f000 f868 	bl	8004ef0 <__malloc_lock>
 8004e20:	f8d8 3000 	ldr.w	r3, [r8]
 8004e24:	461c      	mov	r4, r3
 8004e26:	bb5c      	cbnz	r4, 8004e80 <_malloc_r+0x90>
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f7ff ffc0 	bl	8004db0 <sbrk_aligned>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	4604      	mov	r4, r0
 8004e34:	d155      	bne.n	8004ee2 <_malloc_r+0xf2>
 8004e36:	f8d8 4000 	ldr.w	r4, [r8]
 8004e3a:	4626      	mov	r6, r4
 8004e3c:	2e00      	cmp	r6, #0
 8004e3e:	d145      	bne.n	8004ecc <_malloc_r+0xdc>
 8004e40:	2c00      	cmp	r4, #0
 8004e42:	d048      	beq.n	8004ed6 <_malloc_r+0xe6>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	4631      	mov	r1, r6
 8004e48:	4638      	mov	r0, r7
 8004e4a:	eb04 0903 	add.w	r9, r4, r3
 8004e4e:	f000 fc61 	bl	8005714 <_sbrk_r>
 8004e52:	4581      	cmp	r9, r0
 8004e54:	d13f      	bne.n	8004ed6 <_malloc_r+0xe6>
 8004e56:	6821      	ldr	r1, [r4, #0]
 8004e58:	1a6d      	subs	r5, r5, r1
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f7ff ffa7 	bl	8004db0 <sbrk_aligned>
 8004e62:	3001      	adds	r0, #1
 8004e64:	d037      	beq.n	8004ed6 <_malloc_r+0xe6>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	442b      	add	r3, r5
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d038      	beq.n	8004ee6 <_malloc_r+0xf6>
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	42a2      	cmp	r2, r4
 8004e78:	d12b      	bne.n	8004ed2 <_malloc_r+0xe2>
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	e00f      	b.n	8004ea0 <_malloc_r+0xb0>
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	1b52      	subs	r2, r2, r5
 8004e84:	d41f      	bmi.n	8004ec6 <_malloc_r+0xd6>
 8004e86:	2a0b      	cmp	r2, #11
 8004e88:	d917      	bls.n	8004eba <_malloc_r+0xca>
 8004e8a:	1961      	adds	r1, r4, r5
 8004e8c:	42a3      	cmp	r3, r4
 8004e8e:	6025      	str	r5, [r4, #0]
 8004e90:	bf18      	it	ne
 8004e92:	6059      	strne	r1, [r3, #4]
 8004e94:	6863      	ldr	r3, [r4, #4]
 8004e96:	bf08      	it	eq
 8004e98:	f8c8 1000 	streq.w	r1, [r8]
 8004e9c:	5162      	str	r2, [r4, r5]
 8004e9e:	604b      	str	r3, [r1, #4]
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	f104 060b 	add.w	r6, r4, #11
 8004ea6:	f000 f829 	bl	8004efc <__malloc_unlock>
 8004eaa:	f026 0607 	bic.w	r6, r6, #7
 8004eae:	1d23      	adds	r3, r4, #4
 8004eb0:	1af2      	subs	r2, r6, r3
 8004eb2:	d0ae      	beq.n	8004e12 <_malloc_r+0x22>
 8004eb4:	1b9b      	subs	r3, r3, r6
 8004eb6:	50a3      	str	r3, [r4, r2]
 8004eb8:	e7ab      	b.n	8004e12 <_malloc_r+0x22>
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	6862      	ldr	r2, [r4, #4]
 8004ebe:	d1dd      	bne.n	8004e7c <_malloc_r+0x8c>
 8004ec0:	f8c8 2000 	str.w	r2, [r8]
 8004ec4:	e7ec      	b.n	8004ea0 <_malloc_r+0xb0>
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	6864      	ldr	r4, [r4, #4]
 8004eca:	e7ac      	b.n	8004e26 <_malloc_r+0x36>
 8004ecc:	4634      	mov	r4, r6
 8004ece:	6876      	ldr	r6, [r6, #4]
 8004ed0:	e7b4      	b.n	8004e3c <_malloc_r+0x4c>
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	e7cc      	b.n	8004e70 <_malloc_r+0x80>
 8004ed6:	230c      	movs	r3, #12
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	4638      	mov	r0, r7
 8004edc:	f000 f80e 	bl	8004efc <__malloc_unlock>
 8004ee0:	e797      	b.n	8004e12 <_malloc_r+0x22>
 8004ee2:	6025      	str	r5, [r4, #0]
 8004ee4:	e7dc      	b.n	8004ea0 <_malloc_r+0xb0>
 8004ee6:	605b      	str	r3, [r3, #4]
 8004ee8:	deff      	udf	#255	; 0xff
 8004eea:	bf00      	nop
 8004eec:	2000041c 	.word	0x2000041c

08004ef0 <__malloc_lock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__malloc_lock+0x8>)
 8004ef2:	f7ff bf0e 	b.w	8004d12 <__retarget_lock_acquire_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	20000418 	.word	0x20000418

08004efc <__malloc_unlock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__malloc_unlock+0x8>)
 8004efe:	f7ff bf09 	b.w	8004d14 <__retarget_lock_release_recursive>
 8004f02:	bf00      	nop
 8004f04:	20000418 	.word	0x20000418

08004f08 <__sfputc_r>:
 8004f08:	6893      	ldr	r3, [r2, #8]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	b410      	push	{r4}
 8004f10:	6093      	str	r3, [r2, #8]
 8004f12:	da08      	bge.n	8004f26 <__sfputc_r+0x1e>
 8004f14:	6994      	ldr	r4, [r2, #24]
 8004f16:	42a3      	cmp	r3, r4
 8004f18:	db01      	blt.n	8004f1e <__sfputc_r+0x16>
 8004f1a:	290a      	cmp	r1, #10
 8004f1c:	d103      	bne.n	8004f26 <__sfputc_r+0x1e>
 8004f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f22:	f7ff bde8 	b.w	8004af6 <__swbuf_r>
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	1c58      	adds	r0, r3, #1
 8004f2a:	6010      	str	r0, [r2, #0]
 8004f2c:	7019      	strb	r1, [r3, #0]
 8004f2e:	4608      	mov	r0, r1
 8004f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <__sfputs_r>:
 8004f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f38:	4606      	mov	r6, r0
 8004f3a:	460f      	mov	r7, r1
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	18d5      	adds	r5, r2, r3
 8004f40:	42ac      	cmp	r4, r5
 8004f42:	d101      	bne.n	8004f48 <__sfputs_r+0x12>
 8004f44:	2000      	movs	r0, #0
 8004f46:	e007      	b.n	8004f58 <__sfputs_r+0x22>
 8004f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4c:	463a      	mov	r2, r7
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7ff ffda 	bl	8004f08 <__sfputc_r>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d1f3      	bne.n	8004f40 <__sfputs_r+0xa>
 8004f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f5c <_vfiprintf_r>:
 8004f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	460d      	mov	r5, r1
 8004f62:	b09d      	sub	sp, #116	; 0x74
 8004f64:	4614      	mov	r4, r2
 8004f66:	4698      	mov	r8, r3
 8004f68:	4606      	mov	r6, r0
 8004f6a:	b118      	cbz	r0, 8004f74 <_vfiprintf_r+0x18>
 8004f6c:	6a03      	ldr	r3, [r0, #32]
 8004f6e:	b90b      	cbnz	r3, 8004f74 <_vfiprintf_r+0x18>
 8004f70:	f7ff fcda 	bl	8004928 <__sinit>
 8004f74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f76:	07d9      	lsls	r1, r3, #31
 8004f78:	d405      	bmi.n	8004f86 <_vfiprintf_r+0x2a>
 8004f7a:	89ab      	ldrh	r3, [r5, #12]
 8004f7c:	059a      	lsls	r2, r3, #22
 8004f7e:	d402      	bmi.n	8004f86 <_vfiprintf_r+0x2a>
 8004f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f82:	f7ff fec6 	bl	8004d12 <__retarget_lock_acquire_recursive>
 8004f86:	89ab      	ldrh	r3, [r5, #12]
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	d501      	bpl.n	8004f90 <_vfiprintf_r+0x34>
 8004f8c:	692b      	ldr	r3, [r5, #16]
 8004f8e:	b99b      	cbnz	r3, 8004fb8 <_vfiprintf_r+0x5c>
 8004f90:	4629      	mov	r1, r5
 8004f92:	4630      	mov	r0, r6
 8004f94:	f7ff fdec 	bl	8004b70 <__swsetup_r>
 8004f98:	b170      	cbz	r0, 8004fb8 <_vfiprintf_r+0x5c>
 8004f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f9c:	07dc      	lsls	r4, r3, #31
 8004f9e:	d504      	bpl.n	8004faa <_vfiprintf_r+0x4e>
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	b01d      	add	sp, #116	; 0x74
 8004fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004faa:	89ab      	ldrh	r3, [r5, #12]
 8004fac:	0598      	lsls	r0, r3, #22
 8004fae:	d4f7      	bmi.n	8004fa0 <_vfiprintf_r+0x44>
 8004fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fb2:	f7ff feaf 	bl	8004d14 <__retarget_lock_release_recursive>
 8004fb6:	e7f3      	b.n	8004fa0 <_vfiprintf_r+0x44>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	9309      	str	r3, [sp, #36]	; 0x24
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fc6:	2330      	movs	r3, #48	; 0x30
 8004fc8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800517c <_vfiprintf_r+0x220>
 8004fcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fd0:	f04f 0901 	mov.w	r9, #1
 8004fd4:	4623      	mov	r3, r4
 8004fd6:	469a      	mov	sl, r3
 8004fd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fdc:	b10a      	cbz	r2, 8004fe2 <_vfiprintf_r+0x86>
 8004fde:	2a25      	cmp	r2, #37	; 0x25
 8004fe0:	d1f9      	bne.n	8004fd6 <_vfiprintf_r+0x7a>
 8004fe2:	ebba 0b04 	subs.w	fp, sl, r4
 8004fe6:	d00b      	beq.n	8005000 <_vfiprintf_r+0xa4>
 8004fe8:	465b      	mov	r3, fp
 8004fea:	4622      	mov	r2, r4
 8004fec:	4629      	mov	r1, r5
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f7ff ffa1 	bl	8004f36 <__sfputs_r>
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	f000 80a9 	beq.w	800514c <_vfiprintf_r+0x1f0>
 8004ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ffc:	445a      	add	r2, fp
 8004ffe:	9209      	str	r2, [sp, #36]	; 0x24
 8005000:	f89a 3000 	ldrb.w	r3, [sl]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80a1 	beq.w	800514c <_vfiprintf_r+0x1f0>
 800500a:	2300      	movs	r3, #0
 800500c:	f04f 32ff 	mov.w	r2, #4294967295
 8005010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005014:	f10a 0a01 	add.w	sl, sl, #1
 8005018:	9304      	str	r3, [sp, #16]
 800501a:	9307      	str	r3, [sp, #28]
 800501c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005020:	931a      	str	r3, [sp, #104]	; 0x68
 8005022:	4654      	mov	r4, sl
 8005024:	2205      	movs	r2, #5
 8005026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800502a:	4854      	ldr	r0, [pc, #336]	; (800517c <_vfiprintf_r+0x220>)
 800502c:	f7fb f8d8 	bl	80001e0 <memchr>
 8005030:	9a04      	ldr	r2, [sp, #16]
 8005032:	b9d8      	cbnz	r0, 800506c <_vfiprintf_r+0x110>
 8005034:	06d1      	lsls	r1, r2, #27
 8005036:	bf44      	itt	mi
 8005038:	2320      	movmi	r3, #32
 800503a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800503e:	0713      	lsls	r3, r2, #28
 8005040:	bf44      	itt	mi
 8005042:	232b      	movmi	r3, #43	; 0x2b
 8005044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005048:	f89a 3000 	ldrb.w	r3, [sl]
 800504c:	2b2a      	cmp	r3, #42	; 0x2a
 800504e:	d015      	beq.n	800507c <_vfiprintf_r+0x120>
 8005050:	9a07      	ldr	r2, [sp, #28]
 8005052:	4654      	mov	r4, sl
 8005054:	2000      	movs	r0, #0
 8005056:	f04f 0c0a 	mov.w	ip, #10
 800505a:	4621      	mov	r1, r4
 800505c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005060:	3b30      	subs	r3, #48	; 0x30
 8005062:	2b09      	cmp	r3, #9
 8005064:	d94d      	bls.n	8005102 <_vfiprintf_r+0x1a6>
 8005066:	b1b0      	cbz	r0, 8005096 <_vfiprintf_r+0x13a>
 8005068:	9207      	str	r2, [sp, #28]
 800506a:	e014      	b.n	8005096 <_vfiprintf_r+0x13a>
 800506c:	eba0 0308 	sub.w	r3, r0, r8
 8005070:	fa09 f303 	lsl.w	r3, r9, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	9304      	str	r3, [sp, #16]
 8005078:	46a2      	mov	sl, r4
 800507a:	e7d2      	b.n	8005022 <_vfiprintf_r+0xc6>
 800507c:	9b03      	ldr	r3, [sp, #12]
 800507e:	1d19      	adds	r1, r3, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	9103      	str	r1, [sp, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	bfbb      	ittet	lt
 8005088:	425b      	neglt	r3, r3
 800508a:	f042 0202 	orrlt.w	r2, r2, #2
 800508e:	9307      	strge	r3, [sp, #28]
 8005090:	9307      	strlt	r3, [sp, #28]
 8005092:	bfb8      	it	lt
 8005094:	9204      	strlt	r2, [sp, #16]
 8005096:	7823      	ldrb	r3, [r4, #0]
 8005098:	2b2e      	cmp	r3, #46	; 0x2e
 800509a:	d10c      	bne.n	80050b6 <_vfiprintf_r+0x15a>
 800509c:	7863      	ldrb	r3, [r4, #1]
 800509e:	2b2a      	cmp	r3, #42	; 0x2a
 80050a0:	d134      	bne.n	800510c <_vfiprintf_r+0x1b0>
 80050a2:	9b03      	ldr	r3, [sp, #12]
 80050a4:	1d1a      	adds	r2, r3, #4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	9203      	str	r2, [sp, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bfb8      	it	lt
 80050ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80050b2:	3402      	adds	r4, #2
 80050b4:	9305      	str	r3, [sp, #20]
 80050b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800518c <_vfiprintf_r+0x230>
 80050ba:	7821      	ldrb	r1, [r4, #0]
 80050bc:	2203      	movs	r2, #3
 80050be:	4650      	mov	r0, sl
 80050c0:	f7fb f88e 	bl	80001e0 <memchr>
 80050c4:	b138      	cbz	r0, 80050d6 <_vfiprintf_r+0x17a>
 80050c6:	9b04      	ldr	r3, [sp, #16]
 80050c8:	eba0 000a 	sub.w	r0, r0, sl
 80050cc:	2240      	movs	r2, #64	; 0x40
 80050ce:	4082      	lsls	r2, r0
 80050d0:	4313      	orrs	r3, r2
 80050d2:	3401      	adds	r4, #1
 80050d4:	9304      	str	r3, [sp, #16]
 80050d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050da:	4829      	ldr	r0, [pc, #164]	; (8005180 <_vfiprintf_r+0x224>)
 80050dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050e0:	2206      	movs	r2, #6
 80050e2:	f7fb f87d 	bl	80001e0 <memchr>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d03f      	beq.n	800516a <_vfiprintf_r+0x20e>
 80050ea:	4b26      	ldr	r3, [pc, #152]	; (8005184 <_vfiprintf_r+0x228>)
 80050ec:	bb1b      	cbnz	r3, 8005136 <_vfiprintf_r+0x1da>
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	3307      	adds	r3, #7
 80050f2:	f023 0307 	bic.w	r3, r3, #7
 80050f6:	3308      	adds	r3, #8
 80050f8:	9303      	str	r3, [sp, #12]
 80050fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fc:	443b      	add	r3, r7
 80050fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005100:	e768      	b.n	8004fd4 <_vfiprintf_r+0x78>
 8005102:	fb0c 3202 	mla	r2, ip, r2, r3
 8005106:	460c      	mov	r4, r1
 8005108:	2001      	movs	r0, #1
 800510a:	e7a6      	b.n	800505a <_vfiprintf_r+0xfe>
 800510c:	2300      	movs	r3, #0
 800510e:	3401      	adds	r4, #1
 8005110:	9305      	str	r3, [sp, #20]
 8005112:	4619      	mov	r1, r3
 8005114:	f04f 0c0a 	mov.w	ip, #10
 8005118:	4620      	mov	r0, r4
 800511a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800511e:	3a30      	subs	r2, #48	; 0x30
 8005120:	2a09      	cmp	r2, #9
 8005122:	d903      	bls.n	800512c <_vfiprintf_r+0x1d0>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0c6      	beq.n	80050b6 <_vfiprintf_r+0x15a>
 8005128:	9105      	str	r1, [sp, #20]
 800512a:	e7c4      	b.n	80050b6 <_vfiprintf_r+0x15a>
 800512c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005130:	4604      	mov	r4, r0
 8005132:	2301      	movs	r3, #1
 8005134:	e7f0      	b.n	8005118 <_vfiprintf_r+0x1bc>
 8005136:	ab03      	add	r3, sp, #12
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	462a      	mov	r2, r5
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <_vfiprintf_r+0x22c>)
 800513e:	a904      	add	r1, sp, #16
 8005140:	4630      	mov	r0, r6
 8005142:	f3af 8000 	nop.w
 8005146:	4607      	mov	r7, r0
 8005148:	1c78      	adds	r0, r7, #1
 800514a:	d1d6      	bne.n	80050fa <_vfiprintf_r+0x19e>
 800514c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800514e:	07d9      	lsls	r1, r3, #31
 8005150:	d405      	bmi.n	800515e <_vfiprintf_r+0x202>
 8005152:	89ab      	ldrh	r3, [r5, #12]
 8005154:	059a      	lsls	r2, r3, #22
 8005156:	d402      	bmi.n	800515e <_vfiprintf_r+0x202>
 8005158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800515a:	f7ff fddb 	bl	8004d14 <__retarget_lock_release_recursive>
 800515e:	89ab      	ldrh	r3, [r5, #12]
 8005160:	065b      	lsls	r3, r3, #25
 8005162:	f53f af1d 	bmi.w	8004fa0 <_vfiprintf_r+0x44>
 8005166:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005168:	e71c      	b.n	8004fa4 <_vfiprintf_r+0x48>
 800516a:	ab03      	add	r3, sp, #12
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	462a      	mov	r2, r5
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <_vfiprintf_r+0x22c>)
 8005172:	a904      	add	r1, sp, #16
 8005174:	4630      	mov	r0, r6
 8005176:	f000 f879 	bl	800526c <_printf_i>
 800517a:	e7e4      	b.n	8005146 <_vfiprintf_r+0x1ea>
 800517c:	080057b0 	.word	0x080057b0
 8005180:	080057ba 	.word	0x080057ba
 8005184:	00000000 	.word	0x00000000
 8005188:	08004f37 	.word	0x08004f37
 800518c:	080057b6 	.word	0x080057b6

08005190 <_printf_common>:
 8005190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005194:	4616      	mov	r6, r2
 8005196:	4699      	mov	r9, r3
 8005198:	688a      	ldr	r2, [r1, #8]
 800519a:	690b      	ldr	r3, [r1, #16]
 800519c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051a0:	4293      	cmp	r3, r2
 80051a2:	bfb8      	it	lt
 80051a4:	4613      	movlt	r3, r2
 80051a6:	6033      	str	r3, [r6, #0]
 80051a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051ac:	4607      	mov	r7, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	b10a      	cbz	r2, 80051b6 <_printf_common+0x26>
 80051b2:	3301      	adds	r3, #1
 80051b4:	6033      	str	r3, [r6, #0]
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	0699      	lsls	r1, r3, #26
 80051ba:	bf42      	ittt	mi
 80051bc:	6833      	ldrmi	r3, [r6, #0]
 80051be:	3302      	addmi	r3, #2
 80051c0:	6033      	strmi	r3, [r6, #0]
 80051c2:	6825      	ldr	r5, [r4, #0]
 80051c4:	f015 0506 	ands.w	r5, r5, #6
 80051c8:	d106      	bne.n	80051d8 <_printf_common+0x48>
 80051ca:	f104 0a19 	add.w	sl, r4, #25
 80051ce:	68e3      	ldr	r3, [r4, #12]
 80051d0:	6832      	ldr	r2, [r6, #0]
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	42ab      	cmp	r3, r5
 80051d6:	dc26      	bgt.n	8005226 <_printf_common+0x96>
 80051d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051dc:	1e13      	subs	r3, r2, #0
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	bf18      	it	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	0692      	lsls	r2, r2, #26
 80051e6:	d42b      	bmi.n	8005240 <_printf_common+0xb0>
 80051e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ec:	4649      	mov	r1, r9
 80051ee:	4638      	mov	r0, r7
 80051f0:	47c0      	blx	r8
 80051f2:	3001      	adds	r0, #1
 80051f4:	d01e      	beq.n	8005234 <_printf_common+0xa4>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	6922      	ldr	r2, [r4, #16]
 80051fa:	f003 0306 	and.w	r3, r3, #6
 80051fe:	2b04      	cmp	r3, #4
 8005200:	bf02      	ittt	eq
 8005202:	68e5      	ldreq	r5, [r4, #12]
 8005204:	6833      	ldreq	r3, [r6, #0]
 8005206:	1aed      	subeq	r5, r5, r3
 8005208:	68a3      	ldr	r3, [r4, #8]
 800520a:	bf0c      	ite	eq
 800520c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005210:	2500      	movne	r5, #0
 8005212:	4293      	cmp	r3, r2
 8005214:	bfc4      	itt	gt
 8005216:	1a9b      	subgt	r3, r3, r2
 8005218:	18ed      	addgt	r5, r5, r3
 800521a:	2600      	movs	r6, #0
 800521c:	341a      	adds	r4, #26
 800521e:	42b5      	cmp	r5, r6
 8005220:	d11a      	bne.n	8005258 <_printf_common+0xc8>
 8005222:	2000      	movs	r0, #0
 8005224:	e008      	b.n	8005238 <_printf_common+0xa8>
 8005226:	2301      	movs	r3, #1
 8005228:	4652      	mov	r2, sl
 800522a:	4649      	mov	r1, r9
 800522c:	4638      	mov	r0, r7
 800522e:	47c0      	blx	r8
 8005230:	3001      	adds	r0, #1
 8005232:	d103      	bne.n	800523c <_printf_common+0xac>
 8005234:	f04f 30ff 	mov.w	r0, #4294967295
 8005238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523c:	3501      	adds	r5, #1
 800523e:	e7c6      	b.n	80051ce <_printf_common+0x3e>
 8005240:	18e1      	adds	r1, r4, r3
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	2030      	movs	r0, #48	; 0x30
 8005246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800524a:	4422      	add	r2, r4
 800524c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005254:	3302      	adds	r3, #2
 8005256:	e7c7      	b.n	80051e8 <_printf_common+0x58>
 8005258:	2301      	movs	r3, #1
 800525a:	4622      	mov	r2, r4
 800525c:	4649      	mov	r1, r9
 800525e:	4638      	mov	r0, r7
 8005260:	47c0      	blx	r8
 8005262:	3001      	adds	r0, #1
 8005264:	d0e6      	beq.n	8005234 <_printf_common+0xa4>
 8005266:	3601      	adds	r6, #1
 8005268:	e7d9      	b.n	800521e <_printf_common+0x8e>
	...

0800526c <_printf_i>:
 800526c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005270:	7e0f      	ldrb	r7, [r1, #24]
 8005272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005274:	2f78      	cmp	r7, #120	; 0x78
 8005276:	4691      	mov	r9, r2
 8005278:	4680      	mov	r8, r0
 800527a:	460c      	mov	r4, r1
 800527c:	469a      	mov	sl, r3
 800527e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005282:	d807      	bhi.n	8005294 <_printf_i+0x28>
 8005284:	2f62      	cmp	r7, #98	; 0x62
 8005286:	d80a      	bhi.n	800529e <_printf_i+0x32>
 8005288:	2f00      	cmp	r7, #0
 800528a:	f000 80d4 	beq.w	8005436 <_printf_i+0x1ca>
 800528e:	2f58      	cmp	r7, #88	; 0x58
 8005290:	f000 80c0 	beq.w	8005414 <_printf_i+0x1a8>
 8005294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800529c:	e03a      	b.n	8005314 <_printf_i+0xa8>
 800529e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052a2:	2b15      	cmp	r3, #21
 80052a4:	d8f6      	bhi.n	8005294 <_printf_i+0x28>
 80052a6:	a101      	add	r1, pc, #4	; (adr r1, 80052ac <_printf_i+0x40>)
 80052a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052ac:	08005305 	.word	0x08005305
 80052b0:	08005319 	.word	0x08005319
 80052b4:	08005295 	.word	0x08005295
 80052b8:	08005295 	.word	0x08005295
 80052bc:	08005295 	.word	0x08005295
 80052c0:	08005295 	.word	0x08005295
 80052c4:	08005319 	.word	0x08005319
 80052c8:	08005295 	.word	0x08005295
 80052cc:	08005295 	.word	0x08005295
 80052d0:	08005295 	.word	0x08005295
 80052d4:	08005295 	.word	0x08005295
 80052d8:	0800541d 	.word	0x0800541d
 80052dc:	08005345 	.word	0x08005345
 80052e0:	080053d7 	.word	0x080053d7
 80052e4:	08005295 	.word	0x08005295
 80052e8:	08005295 	.word	0x08005295
 80052ec:	0800543f 	.word	0x0800543f
 80052f0:	08005295 	.word	0x08005295
 80052f4:	08005345 	.word	0x08005345
 80052f8:	08005295 	.word	0x08005295
 80052fc:	08005295 	.word	0x08005295
 8005300:	080053df 	.word	0x080053df
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	1d1a      	adds	r2, r3, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	602a      	str	r2, [r5, #0]
 800530c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005314:	2301      	movs	r3, #1
 8005316:	e09f      	b.n	8005458 <_printf_i+0x1ec>
 8005318:	6820      	ldr	r0, [r4, #0]
 800531a:	682b      	ldr	r3, [r5, #0]
 800531c:	0607      	lsls	r7, r0, #24
 800531e:	f103 0104 	add.w	r1, r3, #4
 8005322:	6029      	str	r1, [r5, #0]
 8005324:	d501      	bpl.n	800532a <_printf_i+0xbe>
 8005326:	681e      	ldr	r6, [r3, #0]
 8005328:	e003      	b.n	8005332 <_printf_i+0xc6>
 800532a:	0646      	lsls	r6, r0, #25
 800532c:	d5fb      	bpl.n	8005326 <_printf_i+0xba>
 800532e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005332:	2e00      	cmp	r6, #0
 8005334:	da03      	bge.n	800533e <_printf_i+0xd2>
 8005336:	232d      	movs	r3, #45	; 0x2d
 8005338:	4276      	negs	r6, r6
 800533a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533e:	485a      	ldr	r0, [pc, #360]	; (80054a8 <_printf_i+0x23c>)
 8005340:	230a      	movs	r3, #10
 8005342:	e012      	b.n	800536a <_printf_i+0xfe>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	6820      	ldr	r0, [r4, #0]
 8005348:	1d19      	adds	r1, r3, #4
 800534a:	6029      	str	r1, [r5, #0]
 800534c:	0605      	lsls	r5, r0, #24
 800534e:	d501      	bpl.n	8005354 <_printf_i+0xe8>
 8005350:	681e      	ldr	r6, [r3, #0]
 8005352:	e002      	b.n	800535a <_printf_i+0xee>
 8005354:	0641      	lsls	r1, r0, #25
 8005356:	d5fb      	bpl.n	8005350 <_printf_i+0xe4>
 8005358:	881e      	ldrh	r6, [r3, #0]
 800535a:	4853      	ldr	r0, [pc, #332]	; (80054a8 <_printf_i+0x23c>)
 800535c:	2f6f      	cmp	r7, #111	; 0x6f
 800535e:	bf0c      	ite	eq
 8005360:	2308      	moveq	r3, #8
 8005362:	230a      	movne	r3, #10
 8005364:	2100      	movs	r1, #0
 8005366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800536a:	6865      	ldr	r5, [r4, #4]
 800536c:	60a5      	str	r5, [r4, #8]
 800536e:	2d00      	cmp	r5, #0
 8005370:	bfa2      	ittt	ge
 8005372:	6821      	ldrge	r1, [r4, #0]
 8005374:	f021 0104 	bicge.w	r1, r1, #4
 8005378:	6021      	strge	r1, [r4, #0]
 800537a:	b90e      	cbnz	r6, 8005380 <_printf_i+0x114>
 800537c:	2d00      	cmp	r5, #0
 800537e:	d04b      	beq.n	8005418 <_printf_i+0x1ac>
 8005380:	4615      	mov	r5, r2
 8005382:	fbb6 f1f3 	udiv	r1, r6, r3
 8005386:	fb03 6711 	mls	r7, r3, r1, r6
 800538a:	5dc7      	ldrb	r7, [r0, r7]
 800538c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005390:	4637      	mov	r7, r6
 8005392:	42bb      	cmp	r3, r7
 8005394:	460e      	mov	r6, r1
 8005396:	d9f4      	bls.n	8005382 <_printf_i+0x116>
 8005398:	2b08      	cmp	r3, #8
 800539a:	d10b      	bne.n	80053b4 <_printf_i+0x148>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	07de      	lsls	r6, r3, #31
 80053a0:	d508      	bpl.n	80053b4 <_printf_i+0x148>
 80053a2:	6923      	ldr	r3, [r4, #16]
 80053a4:	6861      	ldr	r1, [r4, #4]
 80053a6:	4299      	cmp	r1, r3
 80053a8:	bfde      	ittt	le
 80053aa:	2330      	movle	r3, #48	; 0x30
 80053ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053b4:	1b52      	subs	r2, r2, r5
 80053b6:	6122      	str	r2, [r4, #16]
 80053b8:	f8cd a000 	str.w	sl, [sp]
 80053bc:	464b      	mov	r3, r9
 80053be:	aa03      	add	r2, sp, #12
 80053c0:	4621      	mov	r1, r4
 80053c2:	4640      	mov	r0, r8
 80053c4:	f7ff fee4 	bl	8005190 <_printf_common>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d14a      	bne.n	8005462 <_printf_i+0x1f6>
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	b004      	add	sp, #16
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	f043 0320 	orr.w	r3, r3, #32
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	4833      	ldr	r0, [pc, #204]	; (80054ac <_printf_i+0x240>)
 80053e0:	2778      	movs	r7, #120	; 0x78
 80053e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	6829      	ldr	r1, [r5, #0]
 80053ea:	061f      	lsls	r7, r3, #24
 80053ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80053f0:	d402      	bmi.n	80053f8 <_printf_i+0x18c>
 80053f2:	065f      	lsls	r7, r3, #25
 80053f4:	bf48      	it	mi
 80053f6:	b2b6      	uxthmi	r6, r6
 80053f8:	07df      	lsls	r7, r3, #31
 80053fa:	bf48      	it	mi
 80053fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005400:	6029      	str	r1, [r5, #0]
 8005402:	bf48      	it	mi
 8005404:	6023      	strmi	r3, [r4, #0]
 8005406:	b91e      	cbnz	r6, 8005410 <_printf_i+0x1a4>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	f023 0320 	bic.w	r3, r3, #32
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	2310      	movs	r3, #16
 8005412:	e7a7      	b.n	8005364 <_printf_i+0xf8>
 8005414:	4824      	ldr	r0, [pc, #144]	; (80054a8 <_printf_i+0x23c>)
 8005416:	e7e4      	b.n	80053e2 <_printf_i+0x176>
 8005418:	4615      	mov	r5, r2
 800541a:	e7bd      	b.n	8005398 <_printf_i+0x12c>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	6826      	ldr	r6, [r4, #0]
 8005420:	6961      	ldr	r1, [r4, #20]
 8005422:	1d18      	adds	r0, r3, #4
 8005424:	6028      	str	r0, [r5, #0]
 8005426:	0635      	lsls	r5, r6, #24
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	d501      	bpl.n	8005430 <_printf_i+0x1c4>
 800542c:	6019      	str	r1, [r3, #0]
 800542e:	e002      	b.n	8005436 <_printf_i+0x1ca>
 8005430:	0670      	lsls	r0, r6, #25
 8005432:	d5fb      	bpl.n	800542c <_printf_i+0x1c0>
 8005434:	8019      	strh	r1, [r3, #0]
 8005436:	2300      	movs	r3, #0
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	4615      	mov	r5, r2
 800543c:	e7bc      	b.n	80053b8 <_printf_i+0x14c>
 800543e:	682b      	ldr	r3, [r5, #0]
 8005440:	1d1a      	adds	r2, r3, #4
 8005442:	602a      	str	r2, [r5, #0]
 8005444:	681d      	ldr	r5, [r3, #0]
 8005446:	6862      	ldr	r2, [r4, #4]
 8005448:	2100      	movs	r1, #0
 800544a:	4628      	mov	r0, r5
 800544c:	f7fa fec8 	bl	80001e0 <memchr>
 8005450:	b108      	cbz	r0, 8005456 <_printf_i+0x1ea>
 8005452:	1b40      	subs	r0, r0, r5
 8005454:	6060      	str	r0, [r4, #4]
 8005456:	6863      	ldr	r3, [r4, #4]
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	2300      	movs	r3, #0
 800545c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005460:	e7aa      	b.n	80053b8 <_printf_i+0x14c>
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	462a      	mov	r2, r5
 8005466:	4649      	mov	r1, r9
 8005468:	4640      	mov	r0, r8
 800546a:	47d0      	blx	sl
 800546c:	3001      	adds	r0, #1
 800546e:	d0ad      	beq.n	80053cc <_printf_i+0x160>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	079b      	lsls	r3, r3, #30
 8005474:	d413      	bmi.n	800549e <_printf_i+0x232>
 8005476:	68e0      	ldr	r0, [r4, #12]
 8005478:	9b03      	ldr	r3, [sp, #12]
 800547a:	4298      	cmp	r0, r3
 800547c:	bfb8      	it	lt
 800547e:	4618      	movlt	r0, r3
 8005480:	e7a6      	b.n	80053d0 <_printf_i+0x164>
 8005482:	2301      	movs	r3, #1
 8005484:	4632      	mov	r2, r6
 8005486:	4649      	mov	r1, r9
 8005488:	4640      	mov	r0, r8
 800548a:	47d0      	blx	sl
 800548c:	3001      	adds	r0, #1
 800548e:	d09d      	beq.n	80053cc <_printf_i+0x160>
 8005490:	3501      	adds	r5, #1
 8005492:	68e3      	ldr	r3, [r4, #12]
 8005494:	9903      	ldr	r1, [sp, #12]
 8005496:	1a5b      	subs	r3, r3, r1
 8005498:	42ab      	cmp	r3, r5
 800549a:	dcf2      	bgt.n	8005482 <_printf_i+0x216>
 800549c:	e7eb      	b.n	8005476 <_printf_i+0x20a>
 800549e:	2500      	movs	r5, #0
 80054a0:	f104 0619 	add.w	r6, r4, #25
 80054a4:	e7f5      	b.n	8005492 <_printf_i+0x226>
 80054a6:	bf00      	nop
 80054a8:	080057c1 	.word	0x080057c1
 80054ac:	080057d2 	.word	0x080057d2

080054b0 <__sflush_r>:
 80054b0:	898a      	ldrh	r2, [r1, #12]
 80054b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b6:	4605      	mov	r5, r0
 80054b8:	0710      	lsls	r0, r2, #28
 80054ba:	460c      	mov	r4, r1
 80054bc:	d458      	bmi.n	8005570 <__sflush_r+0xc0>
 80054be:	684b      	ldr	r3, [r1, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dc05      	bgt.n	80054d0 <__sflush_r+0x20>
 80054c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	dc02      	bgt.n	80054d0 <__sflush_r+0x20>
 80054ca:	2000      	movs	r0, #0
 80054cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054d2:	2e00      	cmp	r6, #0
 80054d4:	d0f9      	beq.n	80054ca <__sflush_r+0x1a>
 80054d6:	2300      	movs	r3, #0
 80054d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054dc:	682f      	ldr	r7, [r5, #0]
 80054de:	6a21      	ldr	r1, [r4, #32]
 80054e0:	602b      	str	r3, [r5, #0]
 80054e2:	d032      	beq.n	800554a <__sflush_r+0x9a>
 80054e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	075a      	lsls	r2, r3, #29
 80054ea:	d505      	bpl.n	80054f8 <__sflush_r+0x48>
 80054ec:	6863      	ldr	r3, [r4, #4]
 80054ee:	1ac0      	subs	r0, r0, r3
 80054f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054f2:	b10b      	cbz	r3, 80054f8 <__sflush_r+0x48>
 80054f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054f6:	1ac0      	subs	r0, r0, r3
 80054f8:	2300      	movs	r3, #0
 80054fa:	4602      	mov	r2, r0
 80054fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054fe:	6a21      	ldr	r1, [r4, #32]
 8005500:	4628      	mov	r0, r5
 8005502:	47b0      	blx	r6
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	d106      	bne.n	8005518 <__sflush_r+0x68>
 800550a:	6829      	ldr	r1, [r5, #0]
 800550c:	291d      	cmp	r1, #29
 800550e:	d82b      	bhi.n	8005568 <__sflush_r+0xb8>
 8005510:	4a29      	ldr	r2, [pc, #164]	; (80055b8 <__sflush_r+0x108>)
 8005512:	410a      	asrs	r2, r1
 8005514:	07d6      	lsls	r6, r2, #31
 8005516:	d427      	bmi.n	8005568 <__sflush_r+0xb8>
 8005518:	2200      	movs	r2, #0
 800551a:	6062      	str	r2, [r4, #4]
 800551c:	04d9      	lsls	r1, r3, #19
 800551e:	6922      	ldr	r2, [r4, #16]
 8005520:	6022      	str	r2, [r4, #0]
 8005522:	d504      	bpl.n	800552e <__sflush_r+0x7e>
 8005524:	1c42      	adds	r2, r0, #1
 8005526:	d101      	bne.n	800552c <__sflush_r+0x7c>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b903      	cbnz	r3, 800552e <__sflush_r+0x7e>
 800552c:	6560      	str	r0, [r4, #84]	; 0x54
 800552e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005530:	602f      	str	r7, [r5, #0]
 8005532:	2900      	cmp	r1, #0
 8005534:	d0c9      	beq.n	80054ca <__sflush_r+0x1a>
 8005536:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800553a:	4299      	cmp	r1, r3
 800553c:	d002      	beq.n	8005544 <__sflush_r+0x94>
 800553e:	4628      	mov	r0, r5
 8005540:	f7ff fbea 	bl	8004d18 <_free_r>
 8005544:	2000      	movs	r0, #0
 8005546:	6360      	str	r0, [r4, #52]	; 0x34
 8005548:	e7c0      	b.n	80054cc <__sflush_r+0x1c>
 800554a:	2301      	movs	r3, #1
 800554c:	4628      	mov	r0, r5
 800554e:	47b0      	blx	r6
 8005550:	1c41      	adds	r1, r0, #1
 8005552:	d1c8      	bne.n	80054e6 <__sflush_r+0x36>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0c5      	beq.n	80054e6 <__sflush_r+0x36>
 800555a:	2b1d      	cmp	r3, #29
 800555c:	d001      	beq.n	8005562 <__sflush_r+0xb2>
 800555e:	2b16      	cmp	r3, #22
 8005560:	d101      	bne.n	8005566 <__sflush_r+0xb6>
 8005562:	602f      	str	r7, [r5, #0]
 8005564:	e7b1      	b.n	80054ca <__sflush_r+0x1a>
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	e7ad      	b.n	80054cc <__sflush_r+0x1c>
 8005570:	690f      	ldr	r7, [r1, #16]
 8005572:	2f00      	cmp	r7, #0
 8005574:	d0a9      	beq.n	80054ca <__sflush_r+0x1a>
 8005576:	0793      	lsls	r3, r2, #30
 8005578:	680e      	ldr	r6, [r1, #0]
 800557a:	bf08      	it	eq
 800557c:	694b      	ldreq	r3, [r1, #20]
 800557e:	600f      	str	r7, [r1, #0]
 8005580:	bf18      	it	ne
 8005582:	2300      	movne	r3, #0
 8005584:	eba6 0807 	sub.w	r8, r6, r7
 8005588:	608b      	str	r3, [r1, #8]
 800558a:	f1b8 0f00 	cmp.w	r8, #0
 800558e:	dd9c      	ble.n	80054ca <__sflush_r+0x1a>
 8005590:	6a21      	ldr	r1, [r4, #32]
 8005592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005594:	4643      	mov	r3, r8
 8005596:	463a      	mov	r2, r7
 8005598:	4628      	mov	r0, r5
 800559a:	47b0      	blx	r6
 800559c:	2800      	cmp	r0, #0
 800559e:	dc06      	bgt.n	80055ae <__sflush_r+0xfe>
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	e78e      	b.n	80054cc <__sflush_r+0x1c>
 80055ae:	4407      	add	r7, r0
 80055b0:	eba8 0800 	sub.w	r8, r8, r0
 80055b4:	e7e9      	b.n	800558a <__sflush_r+0xda>
 80055b6:	bf00      	nop
 80055b8:	dfbffffe 	.word	0xdfbffffe

080055bc <_fflush_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	690b      	ldr	r3, [r1, #16]
 80055c0:	4605      	mov	r5, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	b913      	cbnz	r3, 80055cc <_fflush_r+0x10>
 80055c6:	2500      	movs	r5, #0
 80055c8:	4628      	mov	r0, r5
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	b118      	cbz	r0, 80055d6 <_fflush_r+0x1a>
 80055ce:	6a03      	ldr	r3, [r0, #32]
 80055d0:	b90b      	cbnz	r3, 80055d6 <_fflush_r+0x1a>
 80055d2:	f7ff f9a9 	bl	8004928 <__sinit>
 80055d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f3      	beq.n	80055c6 <_fflush_r+0xa>
 80055de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055e0:	07d0      	lsls	r0, r2, #31
 80055e2:	d404      	bmi.n	80055ee <_fflush_r+0x32>
 80055e4:	0599      	lsls	r1, r3, #22
 80055e6:	d402      	bmi.n	80055ee <_fflush_r+0x32>
 80055e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ea:	f7ff fb92 	bl	8004d12 <__retarget_lock_acquire_recursive>
 80055ee:	4628      	mov	r0, r5
 80055f0:	4621      	mov	r1, r4
 80055f2:	f7ff ff5d 	bl	80054b0 <__sflush_r>
 80055f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055f8:	07da      	lsls	r2, r3, #31
 80055fa:	4605      	mov	r5, r0
 80055fc:	d4e4      	bmi.n	80055c8 <_fflush_r+0xc>
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	059b      	lsls	r3, r3, #22
 8005602:	d4e1      	bmi.n	80055c8 <_fflush_r+0xc>
 8005604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005606:	f7ff fb85 	bl	8004d14 <__retarget_lock_release_recursive>
 800560a:	e7dd      	b.n	80055c8 <_fflush_r+0xc>

0800560c <__swhatbuf_r>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	460c      	mov	r4, r1
 8005610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005614:	2900      	cmp	r1, #0
 8005616:	b096      	sub	sp, #88	; 0x58
 8005618:	4615      	mov	r5, r2
 800561a:	461e      	mov	r6, r3
 800561c:	da0d      	bge.n	800563a <__swhatbuf_r+0x2e>
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005624:	f04f 0100 	mov.w	r1, #0
 8005628:	bf0c      	ite	eq
 800562a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800562e:	2340      	movne	r3, #64	; 0x40
 8005630:	2000      	movs	r0, #0
 8005632:	6031      	str	r1, [r6, #0]
 8005634:	602b      	str	r3, [r5, #0]
 8005636:	b016      	add	sp, #88	; 0x58
 8005638:	bd70      	pop	{r4, r5, r6, pc}
 800563a:	466a      	mov	r2, sp
 800563c:	f000 f848 	bl	80056d0 <_fstat_r>
 8005640:	2800      	cmp	r0, #0
 8005642:	dbec      	blt.n	800561e <__swhatbuf_r+0x12>
 8005644:	9901      	ldr	r1, [sp, #4]
 8005646:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800564a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800564e:	4259      	negs	r1, r3
 8005650:	4159      	adcs	r1, r3
 8005652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005656:	e7eb      	b.n	8005630 <__swhatbuf_r+0x24>

08005658 <__smakebuf_r>:
 8005658:	898b      	ldrh	r3, [r1, #12]
 800565a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800565c:	079d      	lsls	r5, r3, #30
 800565e:	4606      	mov	r6, r0
 8005660:	460c      	mov	r4, r1
 8005662:	d507      	bpl.n	8005674 <__smakebuf_r+0x1c>
 8005664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	6123      	str	r3, [r4, #16]
 800566c:	2301      	movs	r3, #1
 800566e:	6163      	str	r3, [r4, #20]
 8005670:	b002      	add	sp, #8
 8005672:	bd70      	pop	{r4, r5, r6, pc}
 8005674:	ab01      	add	r3, sp, #4
 8005676:	466a      	mov	r2, sp
 8005678:	f7ff ffc8 	bl	800560c <__swhatbuf_r>
 800567c:	9900      	ldr	r1, [sp, #0]
 800567e:	4605      	mov	r5, r0
 8005680:	4630      	mov	r0, r6
 8005682:	f7ff fbb5 	bl	8004df0 <_malloc_r>
 8005686:	b948      	cbnz	r0, 800569c <__smakebuf_r+0x44>
 8005688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800568c:	059a      	lsls	r2, r3, #22
 800568e:	d4ef      	bmi.n	8005670 <__smakebuf_r+0x18>
 8005690:	f023 0303 	bic.w	r3, r3, #3
 8005694:	f043 0302 	orr.w	r3, r3, #2
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	e7e3      	b.n	8005664 <__smakebuf_r+0xc>
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	6020      	str	r0, [r4, #0]
 80056a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a4:	81a3      	strh	r3, [r4, #12]
 80056a6:	9b00      	ldr	r3, [sp, #0]
 80056a8:	6163      	str	r3, [r4, #20]
 80056aa:	9b01      	ldr	r3, [sp, #4]
 80056ac:	6120      	str	r0, [r4, #16]
 80056ae:	b15b      	cbz	r3, 80056c8 <__smakebuf_r+0x70>
 80056b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056b4:	4630      	mov	r0, r6
 80056b6:	f000 f81d 	bl	80056f4 <_isatty_r>
 80056ba:	b128      	cbz	r0, 80056c8 <__smakebuf_r+0x70>
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	f023 0303 	bic.w	r3, r3, #3
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	81a3      	strh	r3, [r4, #12]
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	431d      	orrs	r5, r3
 80056cc:	81a5      	strh	r5, [r4, #12]
 80056ce:	e7cf      	b.n	8005670 <__smakebuf_r+0x18>

080056d0 <_fstat_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4d07      	ldr	r5, [pc, #28]	; (80056f0 <_fstat_r+0x20>)
 80056d4:	2300      	movs	r3, #0
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	4611      	mov	r1, r2
 80056dc:	602b      	str	r3, [r5, #0]
 80056de:	f7fb fc0a 	bl	8000ef6 <_fstat>
 80056e2:	1c43      	adds	r3, r0, #1
 80056e4:	d102      	bne.n	80056ec <_fstat_r+0x1c>
 80056e6:	682b      	ldr	r3, [r5, #0]
 80056e8:	b103      	cbz	r3, 80056ec <_fstat_r+0x1c>
 80056ea:	6023      	str	r3, [r4, #0]
 80056ec:	bd38      	pop	{r3, r4, r5, pc}
 80056ee:	bf00      	nop
 80056f0:	20000414 	.word	0x20000414

080056f4 <_isatty_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4d06      	ldr	r5, [pc, #24]	; (8005710 <_isatty_r+0x1c>)
 80056f8:	2300      	movs	r3, #0
 80056fa:	4604      	mov	r4, r0
 80056fc:	4608      	mov	r0, r1
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	f7fb fc09 	bl	8000f16 <_isatty>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_isatty_r+0x1a>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	b103      	cbz	r3, 800570e <_isatty_r+0x1a>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	20000414 	.word	0x20000414

08005714 <_sbrk_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4d06      	ldr	r5, [pc, #24]	; (8005730 <_sbrk_r+0x1c>)
 8005718:	2300      	movs	r3, #0
 800571a:	4604      	mov	r4, r0
 800571c:	4608      	mov	r0, r1
 800571e:	602b      	str	r3, [r5, #0]
 8005720:	f7fb fc12 	bl	8000f48 <_sbrk>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d102      	bne.n	800572e <_sbrk_r+0x1a>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	b103      	cbz	r3, 800572e <_sbrk_r+0x1a>
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	20000414 	.word	0x20000414

08005734 <_init>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	bf00      	nop
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr

08005740 <_fini>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	bf00      	nop
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr
